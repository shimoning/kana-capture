{"version":3,"file":"kanaConverter.js","sources":["../../../src/utilities/kanaConverter.ts"],"sourcesContent":["import { isHiraganaCharCode } from './isHiraganaCharCode'\nimport { katakanaMap } from '../map/kana/hiragana2hankakuKatakana'\n\nexport enum KanaType {\n  Hiragana,\n  ZenkakuKatakana,\n  HankakuKatakana,\n}\n\nexport function kanaConverter(type: KanaType, strings: string): string {\n  let resultStrings = ''\n  for (let i = 0; i < strings.length; i++) {\n    const char = strings.charCodeAt(i)\n    if (isHiraganaCharCode(char)) {\n      if (type === KanaType.Hiragana) {\n        resultStrings += strings[i]\n      } else if (type === KanaType.ZenkakuKatakana) {\n        resultStrings += String.fromCharCode(char + 96)\n      } else if (type === KanaType.HankakuKatakana) {\n        const string = strings[i]\n        if (typeof katakanaMap[string] === 'string') {\n          resultStrings += katakanaMap[string]\n        }\n      }\n    }\n  }\n  return resultStrings\n}\n"],"names":["KanaType","KanaType2","kanaConverter","type","strings","resultStrings","i","char","isHiraganaCharCode","string","katakanaMap"],"mappings":"gLAGY,IAAAA,GAAAA,IACVA,EAAAC,EAAA,SAAA,CAAA,EAAA,WACAD,EAAAC,EAAA,gBAAA,CAAA,EAAA,kBACAD,EAAAC,EAAA,gBAAA,CAAA,EAAA,kBAHUD,IAAAA,GAAA,CAAA,CAAA,EAMI,SAAAE,EAAcC,EAAgBC,EAAyB,CACrE,IAAIC,EAAgB,GACpB,QAASC,EAAI,EAAGA,EAAIF,EAAQ,OAAQE,IAAK,CACjC,MAAAC,EAAOH,EAAQ,WAAWE,CAAC,EAC7B,GAAAE,EAAAA,mBAAmBD,CAAI,GACzB,GAAIJ,IAAS,EACXE,GAAiBD,EAAQE,CAAC,UACjBH,IAAS,EACDE,GAAA,OAAO,aAAaE,EAAO,EAAE,UACrCJ,IAAS,EAA0B,CACtC,MAAAM,EAASL,EAAQE,CAAC,EACpB,OAAOI,EAAA,YAAYD,CAAM,GAAM,WACjCJ,GAAiBK,cAAYD,CAAM,EACrC,EAEJ,CAEK,OAAAJ,CACT"}