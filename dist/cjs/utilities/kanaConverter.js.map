{"version":3,"file":"kanaConverter.js","sources":["../../../src/utilities/kanaConverter.ts"],"sourcesContent":["import { isHiraganaCharCode } from './isHiraganaCharCode'\nimport { toKatakanaCharCode } from './toKatakanaCharCode'\nimport { katakanaMap } from '../map/kana/hiragana2hankakuKatakana'\n\nexport enum KanaType {\n  Hiragana,\n  ZenkakuKatakana,\n  HankakuKatakana,\n}\n\nexport function kanaConverter(type: KanaType, strings: string): string {\n  let convertedStrings = ''\n  for (let i = 0; i < strings.length; i++) {\n    const char = strings.charCodeAt(i)\n    if (!isHiraganaCharCode(char)) {\n      convertedStrings += strings[i]\n      continue\n    }\n\n    if (type === KanaType.Hiragana) {\n      convertedStrings += strings[i]\n    } else if (type === KanaType.ZenkakuKatakana) {\n      convertedStrings += String.fromCharCode(toKatakanaCharCode(char))\n    } else if (type === KanaType.HankakuKatakana) {\n      const string = strings[i]\n      if (typeof katakanaMap[string] === 'string') {\n        convertedStrings += katakanaMap[string]\n      }\n    }\n  }\n  return convertedStrings\n}\n"],"names":["KanaType","KanaType2","kanaConverter","type","strings","convertedStrings","i","char","isHiraganaCharCode","toKatakanaCharCode","string","katakanaMap"],"mappings":"qNAIY,IAAAA,GAAAA,IACVA,EAAAC,EAAA,SAAA,CAAA,EAAA,WACAD,EAAAC,EAAA,gBAAA,CAAA,EAAA,kBACAD,EAAAC,EAAA,gBAAA,CAAA,EAAA,kBAHUD,IAAAA,GAAA,CAAA,CAAA,EAMI,SAAAE,EAAcC,EAAgBC,EAAyB,CACrE,IAAIC,EAAmB,GACvB,QAASC,EAAI,EAAGA,EAAIF,EAAQ,OAAQE,IAAK,CACjC,MAAAC,EAAOH,EAAQ,WAAWE,CAAC,EAC7B,GAAA,CAACE,EAAAA,mBAAmBD,CAAI,EAAG,CAC7BF,GAAoBD,EAAQE,CAAC,EAC7B,QAAA,CAGF,GAAIH,IAAS,EACXE,GAAoBD,EAAQE,CAAC,UACpBH,IAAS,EAClBE,GAAoB,OAAO,aAAaI,EAAmB,mBAAAF,CAAI,CAAC,UACvDJ,IAAS,EAA0B,CACtC,MAAAO,EAASN,EAAQE,CAAC,EACpB,OAAOK,EAAA,YAAYD,CAAM,GAAM,WACjCL,GAAoBM,cAAYD,CAAM,EACxC,CACF,CAEK,OAAAL,CACT"}