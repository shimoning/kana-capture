{"version":3,"file":"kanaConverter.js","sources":["../../../src/utilities/kanaConverter.ts"],"sourcesContent":["import { isHiraganaCharCode } from './isHiraganaCharCode'\nimport { toKatakanaCharCode } from './toKatakanaCharCode'\nimport { katakanaMap } from '../maps/kana/hiragana2hankakuKatakana'\n\nexport enum KanaType {\n  Hiragana,\n  ZenkakuKatakana,\n  HankakuKatakana,\n}\n\nexport function kanaConverter(type: KanaType, strings: string): string {\n  let convertedStrings = ''\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    if (type === KanaType.Hiragana) {\n      convertedStrings += string\n    } else if (type === KanaType.ZenkakuKatakana) {\n      const char = strings.charCodeAt(i)\n      if (isHiraganaCharCode(char)) {\n        convertedStrings += String.fromCharCode(toKatakanaCharCode(char))\n      } else {\n        convertedStrings += string\n      }\n    } else if (type === KanaType.HankakuKatakana) {\n      if (typeof katakanaMap[string] === 'string') {\n        convertedStrings += katakanaMap[string]\n      } else {\n        convertedStrings += string\n      }\n    }\n  }\n  return convertedStrings\n}\n"],"names":["KanaType","KanaType2","kanaConverter","type","strings","convertedStrings","i","string","char","isHiraganaCharCode","toKatakanaCharCode","katakanaMap"],"mappings":"sNAIY,IAAAA,GAAAA,IACVA,EAAAC,EAAA,SAAA,CAAA,EAAA,WACAD,EAAAC,EAAA,gBAAA,CAAA,EAAA,kBACAD,EAAAC,EAAA,gBAAA,CAAA,EAAA,kBAHUD,IAAAA,GAAA,CAAA,CAAA,EAMI,SAAAE,EAAcC,EAAgBC,EAAyB,CACrE,IAAIC,EAAmB,GACvB,QAASC,EAAI,EAAGA,EAAIF,EAAQ,OAAQE,IAAK,CACjC,MAAAC,EAASH,EAAQE,CAAC,EACxB,GAAIH,IAAS,EACSE,GAAAE,UACXJ,IAAS,EAA0B,CACtC,MAAAK,EAAOJ,EAAQ,WAAWE,CAAC,EAC7BG,EAAAA,mBAAmBD,CAAI,EACzBH,GAAoB,OAAO,aAAaK,EAAmB,mBAAAF,CAAI,CAAC,EAE5CH,GAAAE,CACtB,MACSJ,IAAS,IACd,OAAOQ,EAAA,YAAYJ,CAAM,GAAM,SACjCF,GAAoBM,cAAYJ,CAAM,EAElBF,GAAAE,EAExB,CAEK,OAAAF,CACT"}