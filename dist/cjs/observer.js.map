{"version":3,"file":"observer.js","sources":["../../src/observer.ts"],"sourcesContent":["import { kanaConverter, KanaType } from './utilities/kanaConverter'\n\nexport { kanaConverter, KanaType }\n\nexport type Options = {\n  observeInterval?: number; // unit: ms\n  debug?: boolean; // logging if true\n  realtime?: boolean | HTMLInputElement;\n  enter?: boolean | HTMLInputElement;\n  clearOnInputEmpty?: boolean;\n};\nexport type Output = {\n  element: HTMLInputElement;\n  type?: KanaType;\n};\nexport enum OutputMode {\n  REALTIME, // default and priority\n  ENTER,\n}\n\n// eslint-disable-next-line no-irregular-whitespace\nexport const AntiHiraganaPattern = /[^ 　ぁあ-んー]/g\nexport const CompactHiraganaPattern = /[ぁぃぅぇぉっゃゅょ]/g\n\nexport function setupObserver(\n  input: HTMLInputElement,\n  outputs: Output[] | string | string[],\n  options: Options = {\n    observeInterval: 30,\n    debug: false,\n    realtime: true,\n    enter: false,\n    clearOnInputEmpty: false,\n  },\n) {\n  let outputMode = OutputMode.REALTIME\n  function _checkOutputMode() {\n    const realtime =\n      options.realtime &&\n      (options.realtime === true ||\n        (options.realtime instanceof HTMLInputElement && options.realtime.checked))\n    const enter =\n      options.enter &&\n      (options.enter === true ||\n        (options.enter instanceof HTMLInputElement && options.enter.checked))\n    outputMode = realtime || !enter\n      ? OutputMode.REALTIME // realtime=true, realtime=false & enter=false\n      : OutputMode.ENTER  // realtime=false & enter=true\n  }\n\n  // 出力先を整える\n  const activeOutputs: Required<Output>[] = []\n  if (typeof outputs === 'string') {\n    const elements = document.querySelectorAll<HTMLInputElement>(outputs)\n    for (const element of elements) {\n      activeOutputs.push({ element, type: KanaType.Hiragana })\n    }\n  } else {\n    for (const output of outputs) {\n      if (typeof output === 'string') {\n        const elements = document.querySelectorAll<HTMLInputElement>(output)\n        for (const element of elements) {\n          activeOutputs.push({ element, type: KanaType.Hiragana })\n        }\n      } else {\n        activeOutputs.push({\n          element: output.element,\n          type: output.type ?? KanaType.Hiragana,\n        })\n      }\n    }\n  }\n\n  let compositing: boolean = false\n  let defaultString: string = ''\n  let currentString: string = ''\n\n  let inputValue: string = ''\n  const outputValues: string[] = new Array(activeOutputs.length).fill('')\n  /**\n   * 初期化\n   * @returns void\n   */\n  function _reset() {\n    _debug('reset')\n    defaultString = ''\n    currentString = ''\n\n    inputValue = ''\n    for (let i = 0; i < activeOutputs.length; i++) {\n      outputValues[i] = ''\n    }\n  }\n  /**\n   * 初期入力値を保存する\n   * @returns void\n   */\n  function _setup() {\n    defaultString = input.value\n    activeOutputs.forEach(({ element }, index) => {\n      outputValues[index] = element.value\n    })\n    _debug('setup', input.value, { defaultString, activeOutputs })\n  }\n\n  let timer: number | undefined\n  /**\n   * 監視を開始する\n   * @returns void\n   */\n  function _start() {\n    _debug('start', { timer })\n    if (timer) {\n      return\n    }\n    timer = setInterval(() => {\n      _checkOutputMode()\n      _observe()\n    }, options.observeInterval ?? 30)\n  }\n  /**\n   * 監視を終了する\n   * @returns void\n   */\n  function _end() {\n    _debug('end')\n    if (timer) {\n      clearInterval(timer)\n      timer = undefined\n    }\n  }\n\n  /**\n   * 入力を監視する\n   * @return void\n   */\n  function _observe() {\n    let inputString = input.value\n    _debug('observe', { compositing, inputString, defaultString, currentString, outputValues })\n\n    // 空文字の場合は何もしない\n    if (inputString === '') {\n      return\n    }\n\n    // すでに入力されている文字を取り除く\n    if (inputString.indexOf(defaultString) !== -1) {\n      inputString = inputString.replace(defaultString, '')\n    }\n\n    // 同じだったら何もしない\n    if (currentString === inputString) {\n      return\n    }\n    currentString = inputString\n\n    // 変換完了している場合は何もしない\n    if (!compositing) {\n      return\n    }\n\n    // ひらがなを抽出して確認及び設定\n    const hiraganaString = currentString.replace(AntiHiraganaPattern, '')\n    _set(hiraganaString)\n  }\n\n  /**\n   * 保存する\n   * @param hiraganaString\n   */\n  function _set(hiraganaString: string) {\n    _debug('set', { defaultString, hiraganaString, inputValue, outputValues })\n    if (hiraganaString.length) {\n      inputValue = hiraganaString\n    }\n\n    activeOutputs.forEach(({ element, type }, index) => {\n      const converted = kanaConverter(type, inputValue)\n      _debug('converted', { type, inputValue, after: converted, before: outputValues[index] })\n      if (outputMode === OutputMode.REALTIME) {\n        element.value = outputValues[index] + converted\n      } else if (outputMode === OutputMode.ENTER) {\n        element.dataset['kana'] = outputValues[index] = converted\n      }\n    })\n  }\n\n  function _reflect() {\n    activeOutputs.forEach(({ element }) => {\n      if (element.dataset['kana']) {\n        element.value += element.dataset['kana']\n        element.removeAttribute('data-kana')\n      }\n    })\n  }\n\n  /**\n   * デバッグログ\n   * @param message\n   * @param args\n   * @return void\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _debug(message: string, ...args: any[]) {\n    if (!options.debug) {\n      return\n    }\n    if (args.length === 0) {\n      console.info('debug', { message })\n      return\n    }\n    console.info('debug', { message }, ...args)\n  }\n\n  /**\n   * event listeners\n   */\n  input.addEventListener('focus', () => {\n    _debug('focus')\n    _setup()\n  })\n  input.addEventListener('blur', () => {\n    _debug('blur')\n    _end()\n  })\n  input.addEventListener('compositionstart', (e: CompositionEvent) => {\n    _debug('compositionstart', { e })\n    _setup()\n    _start()\n    compositing = true\n  })\n  input.addEventListener('compositionend', (e: CompositionEvent) => {\n    _debug('compositionend', { e })\n    _end()\n    compositing = false\n  })\n  input.addEventListener('keydown', (e: KeyboardEvent) => {\n    _debug('keydown', { compositing, e })\n    if (!compositing) {\n      _setup()\n    }\n\n    if (e.code === 'Enter') {\n      if (options.clearOnInputEmpty && input.value === '') {\n        _reset()\n        _set('')\n      } else {\n        if (outputMode === OutputMode.ENTER) {\n          _reflect()\n        }\n      }\n    }\n  })\n  input.addEventListener('keyup', (e: Event) => {\n    _debug('keyup', { compositing, e })\n  })\n}\n"],"names":["OutputMode","OutputMode2","AntiHiraganaPattern","CompactHiraganaPattern","setupObserver","input","outputs","options","outputMode","_checkOutputMode","realtime","enter","activeOutputs","elements","element","KanaType","output","compositing","defaultString","currentString","inputValue","outputValues","_reset","_debug","i","_setup","index","timer","_start","_observe","_end","inputString","hiraganaString","_set","type","converted","kanaConverter","_reflect","message","args"],"mappings":"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"}