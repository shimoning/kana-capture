{"version":3,"file":"observer.js","sources":["../../src/observer.ts"],"sourcesContent":["import { diff } from './utilities/diff'\nimport { CaptureableCharacterPattern, CaptureableCharacterType, extractor, generateCaptureableRegExp } from './utilities/extractor'\nimport { kanaConverter, KanaType } from './utilities/kanaConverter'\nexport { KanaType, CaptureableCharacterType }\nexport type { CaptureableCharacterPattern }\n\nexport type Options = {\n  observeInterval?: number; // unit: ms\n  debug?: boolean; // logging if true\n  realtime?: boolean | HTMLInputElement;\n  enter?: boolean | HTMLInputElement;\n  clearOnInputEmpty?: boolean;\n  captureablePatterns?: CaptureableCharacterPattern | CaptureableCharacterPattern[];\n};\n\n// TODO: support other elements (e.g. HTMLDivElement, HTMLSpanElement, HTMLTextAreaElement)\nexport type OutputElement = Output | HTMLInputElement | string;\nexport type Output = {\n  element: HTMLInputElement;\n  type?: KanaType;\n};\nexport enum OutputTiming {\n  REALTIME, // default and priority\n  ENTER,\n}\n\nexport function setupObserver(\n  input: HTMLInputElement | string, // TODO: support textarea (HTMLTextAreaElement)\n  outputs: OutputElement | OutputElement[],\n  options: Options = {\n    observeInterval: 30,\n    debug: false,\n    realtime: true,\n    enter: false,\n    clearOnInputEmpty: false,\n    captureablePatterns: CaptureableCharacterType.HIRAGANA,\n  },\n) {\n  // 入力値を受け付けるパターン\n  const captureablePatterns = generateCaptureableRegExp(\n    options.captureablePatterns ?? CaptureableCharacterType.HIRAGANA,\n  )\n\n  // 入力元を整える\n  const inputElement = typeof input === 'string'\n    ? document.querySelector<HTMLInputElement>(input)\n    : input\n  if (!inputElement) {\n    throw new Error('input element not found')\n  }\n\n  // 出力のタイミング\n  let outputTiming = OutputTiming.REALTIME\n  function _checkOutputTiming() {\n    const realtime =\n      options.realtime &&\n      (options.realtime === true ||\n        (options.realtime instanceof HTMLInputElement && options.realtime.checked))\n    const enter =\n      options.enter &&\n      (options.enter === true ||\n        (options.enter instanceof HTMLInputElement && options.enter.checked))\n    outputTiming = realtime || !enter\n      ? OutputTiming.REALTIME // realtime=true, realtime=false & enter=false\n      : OutputTiming.ENTER  // realtime=false & enter=true\n  }\n\n  // 出力先を整える\n  const activeOutputs: Required<Output>[] = []\n  const _outputParser = (output: OutputElement): void => {\n    if (typeof output === 'string') {\n      const elements = document.querySelectorAll<HTMLInputElement>(output)\n      for (const element of elements) {\n        activeOutputs.push({ element, type: KanaType.Hiragana })\n      }\n    } else if (output instanceof HTMLInputElement) {\n      activeOutputs.push({ element: output, type: KanaType.Hiragana })\n    } else {\n      activeOutputs.push({\n        element: output.element,\n        type: output.type ?? KanaType.Hiragana,\n      })\n    }\n  }\n  if (Array.isArray(outputs)) {\n    for (const output of outputs) {\n      _outputParser(output)\n    }\n  } else {\n    _outputParser(outputs)\n  }\n\n  // 状態管理\n  let observing: boolean = false\n  let defaultString: string = ''\n  let currentString: string = ''\n\n  let inputValue: string = ''\n  const outputValues: string[] = new Array(activeOutputs.length).fill('')\n  /**\n   * 初期化\n   * @returns void\n   */\n  function _reset() {\n    _debug('reset')\n    defaultString = ''\n    currentString = ''\n\n    inputValue = ''\n    for (let i = 0; i < activeOutputs.length; i++) {\n      outputValues[i] = ''\n    }\n  }\n  /**\n   * 初期入力値を保存する\n   * @returns void\n   */\n  function _setup() {\n    defaultString = inputElement!.value\n    activeOutputs.forEach(({ element }, index) => {\n      outputValues[index] = element.value\n    })\n    _debug('setup', inputElement!.value, { defaultString, activeOutputs })\n  }\n\n  let timer: number | undefined\n  /**\n   * 監視を開始する\n   * @returns void\n   */\n  function _start() {\n    _debug('start', { timer })\n    if (timer) {\n      return\n    }\n    timer = setInterval(() => {\n      _checkOutputTiming()\n      _observe()\n    }, options.observeInterval ?? 30)\n  }\n  /**\n   * 監視を終了する\n   * @returns void\n   */\n  function _end() {\n    _debug('end', { timer })\n    if (timer) {\n      clearInterval(timer)\n      timer = undefined\n    }\n  }\n\n  /**\n   * 入力を監視する\n   * @return void\n   */\n  function _observe() {\n    let inputString = inputElement!.value\n    _debug('observe', { observing, inputString, defaultString, currentString, outputValues })\n\n    // 空文字の場合は何もしない\n    if (inputString === '') {\n      return\n    }\n\n    // すでに入力されている文字を取り除く\n    const diffResult = diff(defaultString, inputString)\n    inputString = diffResult.diff\n\n    // 同じだったら何もしない\n    if (currentString === inputString) {\n      return\n    }\n    currentString = inputString\n\n    // 変換完了している場合は何もしない\n    if (!observing) {\n      return\n    }\n\n    // セットする\n    _set(currentString)\n  }\n\n  /**\n   * セットする\n   * @param string\n   */\n  function _set(string: string) {\n    _debug('set', { defaultString, string, inputValue, outputValues })\n    const extracted = extractor({\n      input: string,\n      patterns: captureablePatterns,\n    })\n    if (extracted.length === string.length) {\n      inputValue = extracted\n    }\n\n    activeOutputs.forEach(({ element, type }, index) => {\n      const converted = kanaConverter(type, inputValue)\n      _debug('converted', { type, string, inputValue, after: converted, before: outputValues[index] })\n      if (outputTiming === OutputTiming.REALTIME) {\n        element.value = outputValues[index] + converted\n      } else if (outputTiming === OutputTiming.ENTER) {\n        element.dataset['kana'] = outputValues[index] = converted\n      }\n    })\n  }\n\n  /**\n   * 反映する\n   * @returns void\n   */\n  function _reflect() {\n    activeOutputs.forEach(({ element }) => {\n      if (element.dataset['kana']) {\n        element.value += element.dataset['kana']\n        element.removeAttribute('data-kana')\n      }\n    })\n  }\n\n  /**\n   * デバッグログ\n   * @param message\n   * @param args\n   * @return void\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _debug(message: string, ...args: any[]) {\n    if (!options.debug) {\n      return\n    }\n    if (args.length === 0) {\n      console.info('debug', { message })\n      return\n    }\n    console.info('debug', { message }, ...args)\n  }\n\n  /**\n   * Event listeners\n   */\n  inputElement.addEventListener('focus', () => {\n    _debug('focus')\n    _setup()\n  })\n  inputElement.addEventListener('blur', () => {\n    _debug('blur')\n    _end()\n  })\n  inputElement.addEventListener('compositionstart', (e: CompositionEvent) => {\n    _debug('compositionstart', { e })\n    _setup()\n    _start()\n    observing = true\n  })\n  inputElement.addEventListener('compositionend', (e: CompositionEvent) => {\n    _debug('compositionend', { e })\n    _end()\n    _set(inputValue)\n    _reset()\n    observing = false\n  })\n  inputElement.addEventListener('keydown', (e: KeyboardEvent) => {\n    _debug('keydown', { observing, e })\n    if (!observing) {\n      _setup()\n    }\n\n    if (e.code === 'Enter') {\n      if (options.clearOnInputEmpty && inputElement.value === '') {\n        _reset()\n        _set('')\n      } else {\n        if (outputTiming === OutputTiming.ENTER) {\n          _reflect()\n        }\n      }\n    }\n  })\n  inputElement.addEventListener('keyup', (e: Event) => {\n    _debug('keyup', { observing, e })\n  })\n}\n"],"names":["OutputTiming","OutputTiming2","setupObserver","input","outputs","options","CaptureableCharacterType","captureablePatterns","generateCaptureableRegExp","inputElement","outputTiming","_checkOutputTiming","realtime","enter","activeOutputs","_outputParser","output","elements","element","KanaType","observing","defaultString","currentString","inputValue","outputValues","_reset","_debug","i","_setup","index","timer","_start","_observe","_end","inputString","diff","_set","string","extracted","extractor","type","converted","kanaConverter","_reflect","message","args"],"mappings":"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"}