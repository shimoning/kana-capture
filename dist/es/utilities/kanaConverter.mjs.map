{"version":3,"file":"kanaConverter.mjs","sources":["../../../src/utilities/kanaConverter.ts"],"sourcesContent":["import { isHiraganaCharCode } from './isHiraganaCharCode'\nimport { katakanaMap } from '../map/kana/hiragana2hankakuKatakana'\n\nexport enum KanaType {\n  Hiragana,\n  ZenkakuKatakana,\n  HankakuKatakana,\n}\n\nexport function kanaConverter(type: KanaType, strings: string): string {\n  let resultStrings = ''\n  for (let i = 0; i < strings.length; i++) {\n    const char = strings.charCodeAt(i)\n    if (isHiraganaCharCode(char)) {\n      if (type === KanaType.Hiragana) {\n        resultStrings += strings[i]\n      } else if (type === KanaType.ZenkakuKatakana) {\n        resultStrings += String.fromCharCode(char + 96)\n      } else if (type === KanaType.HankakuKatakana) {\n        const string = strings[i]\n        if (typeof katakanaMap[string] === 'string') {\n          resultStrings += katakanaMap[string]\n        }\n      }\n    }\n  }\n  return resultStrings\n}\n"],"names":["KanaType","KanaType2","kanaConverter","type","strings","resultStrings","i","char","isHiraganaCharCode","string","katakanaMap"],"mappings":";;AAGY,IAAAA,sBAAAA,OACVA,EAAAC,EAAA,WAAA,CAAA,IAAA,YACAD,EAAAC,EAAA,kBAAA,CAAA,IAAA,mBACAD,EAAAC,EAAA,kBAAA,CAAA,IAAA,mBAHUD,IAAAA,KAAA,CAAA,CAAA;AAMI,SAAAE,EAAcC,GAAgBC,GAAyB;AACrE,MAAIC,IAAgB;AACpB,WAASC,IAAI,GAAGA,IAAIF,EAAQ,QAAQE,KAAK;AACjC,UAAAC,IAAOH,EAAQ,WAAWE,CAAC;AAC7B,QAAAE,EAAmBD,CAAI;AACzB,UAAIJ,MAAS;AACX,QAAAE,KAAiBD,EAAQE,CAAC;AAAA,eACjBH,MAAS;AACD,QAAAE,KAAA,OAAO,aAAaE,IAAO,EAAE;AAAA,eACrCJ,MAAS,GAA0B;AACtC,cAAAM,IAASL,EAAQE,CAAC;AACxB,QAAI,OAAOI,EAAYD,CAAM,KAAM,aACjCJ,KAAiBK,EAAYD,CAAM;AAAA,MACrC;AAAA;AAAA,EAEJ;AAEK,SAAAJ;AACT;"}