{"version":3,"file":"kanaConverter.mjs","sources":["../../../src/utilities/kanaConverter.ts"],"sourcesContent":["import { isHiraganaCharCode } from './isHiraganaCharCode'\nimport { toKatakanaCharCode } from './toKatakanaCharCode'\nimport { katakanaMap } from '../map/kana/hiragana2hankakuKatakana'\n\nexport enum KanaType {\n  Hiragana,\n  ZenkakuKatakana,\n  HankakuKatakana,\n}\n\nexport function kanaConverter(type: KanaType, strings: string): string {\n  let convertedStrings = ''\n  for (let i = 0; i < strings.length; i++) {\n    const char = strings.charCodeAt(i)\n    if (!isHiraganaCharCode(char)) {\n      convertedStrings += strings[i]\n      continue\n    }\n\n    if (type === KanaType.Hiragana) {\n      convertedStrings += strings[i]\n    } else if (type === KanaType.ZenkakuKatakana) {\n      convertedStrings += String.fromCharCode(toKatakanaCharCode(char))\n    } else if (type === KanaType.HankakuKatakana) {\n      const string = strings[i]\n      if (typeof katakanaMap[string] === 'string') {\n        convertedStrings += katakanaMap[string]\n      }\n    }\n  }\n  return convertedStrings\n}\n"],"names":["KanaType","KanaType2","kanaConverter","type","strings","convertedStrings","i","char","isHiraganaCharCode","toKatakanaCharCode","string","katakanaMap"],"mappings":";;;AAIY,IAAAA,sBAAAA,OACVA,EAAAC,EAAA,WAAA,CAAA,IAAA,YACAD,EAAAC,EAAA,kBAAA,CAAA,IAAA,mBACAD,EAAAC,EAAA,kBAAA,CAAA,IAAA,mBAHUD,IAAAA,KAAA,CAAA,CAAA;AAMI,SAAAE,EAAcC,GAAgBC,GAAyB;AACrE,MAAIC,IAAmB;AACvB,WAASC,IAAI,GAAGA,IAAIF,EAAQ,QAAQE,KAAK;AACjC,UAAAC,IAAOH,EAAQ,WAAWE,CAAC;AAC7B,QAAA,CAACE,EAAmBD,CAAI,GAAG;AAC7B,MAAAF,KAAoBD,EAAQE,CAAC;AAC7B;AAAA,IAAA;AAGF,QAAIH,MAAS;AACX,MAAAE,KAAoBD,EAAQE,CAAC;AAAA,aACpBH,MAAS;AAClB,MAAAE,KAAoB,OAAO,aAAaI,EAAmBF,CAAI,CAAC;AAAA,aACvDJ,MAAS,GAA0B;AACtC,YAAAO,IAASN,EAAQE,CAAC;AACxB,MAAI,OAAOK,EAAYD,CAAM,KAAM,aACjCL,KAAoBM,EAAYD,CAAM;AAAA,IACxC;AAAA,EACF;AAEK,SAAAL;AACT;"}