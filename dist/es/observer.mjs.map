{"version":3,"file":"observer.mjs","sources":["../../src/observer.ts"],"sourcesContent":["import { CaptureableCharacterPattern, CaptureableCharacterType, extractor } from './utilities/extractor'\nimport { kanaConverter, KanaType } from './utilities/kanaConverter'\nexport { KanaType, CaptureableCharacterType }\nexport type { CaptureableCharacterPattern }\n\nexport type Options = {\n  observeInterval?: number; // unit: ms\n  debug?: boolean; // logging if true\n  realtime?: boolean | HTMLInputElement;\n  enter?: boolean | HTMLInputElement;\n  clearOnInputEmpty?: boolean;\n  captureablePatterns?: CaptureableCharacterPattern | CaptureableCharacterPattern[];\n};\nexport type Output = {\n  element: HTMLInputElement;\n  type?: KanaType;\n};\nexport enum OutputMode {\n  REALTIME, // default and priority\n  ENTER,\n}\n\nexport function setupObserver(\n  input: HTMLInputElement,\n  outputs: (Output | string)[] | string,\n  options: Options = {\n    observeInterval: 30,\n    debug: false,\n    realtime: true,\n    enter: false,\n    clearOnInputEmpty: false,\n    captureablePatterns: CaptureableCharacterType.HIRAGANA,\n  },\n) {\n  let outputMode = OutputMode.REALTIME\n  function _checkOutputMode() {\n    const realtime =\n      options.realtime &&\n      (options.realtime === true ||\n        (options.realtime instanceof HTMLInputElement && options.realtime.checked))\n    const enter =\n      options.enter &&\n      (options.enter === true ||\n        (options.enter instanceof HTMLInputElement && options.enter.checked))\n    outputMode = realtime || !enter\n      ? OutputMode.REALTIME // realtime=true, realtime=false & enter=false\n      : OutputMode.ENTER  // realtime=false & enter=true\n  }\n\n  // 出力先を整える\n  const activeOutputs: Required<Output>[] = []\n  if (typeof outputs === 'string') {\n    const elements = document.querySelectorAll<HTMLInputElement>(outputs)\n    for (const element of elements) {\n      activeOutputs.push({ element, type: KanaType.Hiragana })\n    }\n  } else {\n    for (const output of outputs) {\n      if (typeof output === 'string') {\n        const elements = document.querySelectorAll<HTMLInputElement>(output)\n        for (const element of elements) {\n          activeOutputs.push({ element, type: KanaType.Hiragana })\n        }\n      } else {\n        activeOutputs.push({\n          element: output.element,\n          type: output.type ?? KanaType.Hiragana,\n        })\n      }\n    }\n  }\n\n  let compositing: boolean = false\n  let defaultString: string = ''\n  let currentString: string = ''\n\n  let inputValue: string = ''\n  const outputValues: string[] = new Array(activeOutputs.length).fill('')\n  /**\n   * 初期化\n   * @returns void\n   */\n  function _reset() {\n    _debug('reset')\n    defaultString = ''\n    currentString = ''\n\n    inputValue = ''\n    for (let i = 0; i < activeOutputs.length; i++) {\n      outputValues[i] = ''\n    }\n  }\n  /**\n   * 初期入力値を保存する\n   * @returns void\n   */\n  function _setup() {\n    defaultString = input.value\n    activeOutputs.forEach(({ element }, index) => {\n      outputValues[index] = element.value\n    })\n    _debug('setup', input.value, { defaultString, activeOutputs })\n  }\n\n  let timer: number | undefined\n  /**\n   * 監視を開始する\n   * @returns void\n   */\n  function _start() {\n    _debug('start', { timer })\n    if (timer) {\n      return\n    }\n    timer = setInterval(() => {\n      _checkOutputMode()\n      _observe()\n    }, options.observeInterval ?? 30)\n  }\n  /**\n   * 監視を終了する\n   * @returns void\n   */\n  function _end() {\n    _debug('end', { timer })\n    if (timer) {\n      clearInterval(timer)\n      timer = undefined\n    }\n  }\n\n  /**\n   * 入力を監視する\n   * @return void\n   */\n  function _observe() {\n    let inputString = input.value\n    _debug('observe', { compositing, inputString, defaultString, currentString, outputValues })\n\n    // 空文字の場合は何もしない\n    if (inputString === '') {\n      return\n    }\n\n    // すでに入力されている文字を取り除く\n    inputString = inputString.replace(\n      new RegExp('[' + defaultString + ']', 'g'),\n      '',\n    )\n\n    // 同じだったら何もしない\n    if (currentString === inputString) {\n      return\n    }\n    currentString = inputString\n\n    // 変換完了している場合は何もしない\n    if (!compositing) {\n      return\n    }\n\n    // セットする\n    _set(currentString)\n  }\n\n  /**\n   * セットする\n   * @param string\n   */\n  function _set(string: string) {\n    _debug('set', { defaultString, string, inputValue, outputValues })\n    const extracted = extractor({\n      input: string,\n      patterns: options.captureablePatterns ?? CaptureableCharacterType.HIRAGANA,\n    })\n    console.warn({ extracted, string, inputValue, defaultString })\n    if (extracted.length === string.length) {\n      inputValue = extracted\n    }\n\n    activeOutputs.forEach(({ element, type }, index) => {\n      const converted = kanaConverter(type, inputValue)\n      _debug('converted', { type, string, inputValue, after: converted, before: outputValues[index] })\n      if (outputMode === OutputMode.REALTIME) {\n        element.value = outputValues[index] + converted\n      } else if (outputMode === OutputMode.ENTER) {\n        element.dataset['kana'] = outputValues[index] = converted\n      }\n    })\n  }\n\n  /**\n   * 反映する\n   * @returns void\n   */\n  function _reflect() {\n    activeOutputs.forEach(({ element }) => {\n      if (element.dataset['kana']) {\n        element.value += element.dataset['kana']\n        element.removeAttribute('data-kana')\n      }\n    })\n  }\n\n  /**\n   * デバッグログ\n   * @param message\n   * @param args\n   * @return void\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _debug(message: string, ...args: any[]) {\n    if (!options.debug) {\n      return\n    }\n    if (args.length === 0) {\n      console.info('debug', { message })\n      return\n    }\n    console.info('debug', { message }, ...args)\n  }\n\n  /**\n   * event listeners\n   */\n  input.addEventListener('focus', () => {\n    _debug('focus')\n    _setup()\n  })\n  input.addEventListener('blur', () => {\n    _debug('blur')\n    _end()\n  })\n  input.addEventListener('compositionstart', (e: CompositionEvent) => {\n    _debug('compositionstart', { e })\n    _setup()\n    _start()\n    compositing = true\n  })\n  input.addEventListener('compositionend', (e: CompositionEvent) => {\n    _debug('compositionend', { e })\n    _end()\n    _set(inputValue)\n    _reset()\n    compositing = false\n  })\n  input.addEventListener('keydown', (e: KeyboardEvent) => {\n    _debug('keydown', { compositing, e })\n    if (!compositing) {\n      _setup()\n    }\n\n    if (e.code === 'Enter') {\n      if (options.clearOnInputEmpty && input.value === '') {\n        _reset()\n        _set('')\n      } else {\n        if (outputMode === OutputMode.ENTER) {\n          _reflect()\n        }\n      }\n    }\n  })\n  input.addEventListener('keyup', (e: Event) => {\n    _debug('keyup', { compositing, e })\n  })\n}\n"],"names":["OutputMode","OutputMode2","setupObserver","input","outputs","options","CaptureableCharacterType","outputMode","_checkOutputMode","realtime","enter","activeOutputs","elements","element","KanaType","output","compositing","defaultString","currentString","inputValue","outputValues","_reset","_debug","i","_setup","index","timer","_start","_observe","_end","inputString","_set","string","extracted","extractor","type","converted","kanaConverter","_reflect","message","args"],"mappings":"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"}