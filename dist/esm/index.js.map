{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["import { diff } from './utilities/diff'\nimport {\n  CaptureableCharacterPattern,\n  CaptureableCharacterType,\n  generateCaptureableRegExp,\n  extractor,\n} from './utilities/extractor'\nimport { kanaConverter, KanaType } from './utilities/kanaConverter'\nexport { KanaType, CaptureableCharacterType }\nexport type { CaptureableCharacterPattern }\n\nexport type Options = {\n  observeInterval?: number; // unit: ms\n  debug?: boolean; // logging if true\n  realtime?: boolean | HTMLInputElement;\n  enter?: boolean | HTMLInputElement;\n  clearOnInputEmpty?: boolean;\n  captureablePatterns?: CaptureableCharacterPattern | CaptureableCharacterPattern[];\n};\n\n// TODO: support other elements (e.g. HTMLDivElement, HTMLSpanElement, HTMLTextAreaElement)\nexport type OutputElement = Output | HTMLInputElement | string;\nexport type Output = {\n  element: HTMLInputElement;\n  type?: KanaType;\n};\nexport enum OutputTiming {\n  REALTIME, // default and priority\n  ENTER,\n}\n// TODO: support textarea (HTMLTextAreaElement)\nexport type InputElement = HTMLInputElement | string;\nexport function setupObserver(\n  input: InputElement,\n  outputs: OutputElement | OutputElement[],\n  options: Options = {\n    observeInterval: 30,\n    debug: false,\n    realtime: true,\n    enter: false,\n    clearOnInputEmpty: false,\n    captureablePatterns: CaptureableCharacterType.HIRAGANA,\n  },\n) {\n  // 入力値を受け付けるパターン\n  // TODO: support dynamic patterns\n  const captureablePatterns = generateCaptureableRegExp(\n    options.captureablePatterns ?? CaptureableCharacterType.HIRAGANA,\n  )\n\n  // 入力元を整える\n  const inputElement = typeof input === 'string'\n    ? document.querySelector<HTMLInputElement>(input)\n    : input\n  if (!inputElement) {\n    throw new Error('input element not found')\n  }\n\n  // 出力のタイミング\n  let outputTiming = OutputTiming.REALTIME\n  const outputTimingIsStatic = !(options.realtime instanceof HTMLInputElement)\n    && !(options.enter instanceof HTMLInputElement)\n  function _checkOutputTiming() {\n    const realtime =\n      options.realtime &&\n      (options.realtime === true ||\n        (options.realtime instanceof HTMLInputElement && options.realtime.checked))\n    const enter =\n      options.enter &&\n      (options.enter === true ||\n        (options.enter instanceof HTMLInputElement && options.enter.checked))\n    outputTiming = realtime || !enter\n      ? OutputTiming.REALTIME // realtime=true, realtime=false & enter=false\n      : OutputTiming.ENTER  // realtime=false & enter=true\n  }\n\n  // 出力先を整える\n  const activeOutputs: Required<Output>[] = []\n  const _outputParser = (output: OutputElement): void => {\n    if (typeof output === 'string') {\n      const elements = document.querySelectorAll<HTMLInputElement>(output)\n      for (const element of elements) {\n        activeOutputs.push({ element, type: KanaType.Hiragana })\n      }\n    } else if (output instanceof HTMLInputElement) {\n      activeOutputs.push({ element: output, type: KanaType.Hiragana })\n    } else {\n      activeOutputs.push({\n        element: output.element,\n        type: output.type ?? KanaType.Hiragana,\n      })\n    }\n  }\n  if (Array.isArray(outputs)) {\n    for (const output of outputs) {\n      _outputParser(output)\n    }\n  } else {\n    _outputParser(outputs)\n  }\n\n  // 状態管理\n  let observing: boolean = false\n  let defaultString: string = ''\n  let currentString: string = ''\n\n  let inputValue: string = ''\n  const outputValues: string[] = new Array(activeOutputs.length).fill('')\n  /**\n   * 初期化\n   * @returns void\n   */\n  function _reset() {\n    _debug('reset')\n    defaultString = ''\n    currentString = ''\n\n    inputValue = ''\n    for (let i = 0; i < activeOutputs.length; i++) {\n      outputValues[i] = ''\n    }\n  }\n  /**\n   * 初期入力値を保存する\n   * @returns void\n   */\n  function _setup() {\n    defaultString = inputElement!.value\n    activeOutputs.forEach(({ element }, index) => {\n      outputValues[index] = element.value\n    })\n    _debug('setup', inputElement!.value, { defaultString, activeOutputs })\n  }\n\n  let timer: ReturnType<typeof setInterval> | undefined\n  /**\n   * 監視を開始する\n   * @returns void\n   */\n  function _start() {\n    _debug('start', { timer })\n    if (timer) {\n      return\n    }\n    timer = setInterval(() => {\n      if (!outputTimingIsStatic) {\n        _checkOutputTiming()\n      }\n      _observe()\n    }, options.observeInterval ?? 30)\n  }\n  /**\n   * 監視を終了する\n   * @returns void\n   */\n  function _end() {\n    _debug('end', { timer })\n    if (timer) {\n      clearInterval(timer)\n      timer = undefined\n    }\n  }\n\n  /**\n   * 入力を監視する\n   * @return void\n   */\n  function _observe() {\n    const inputString = inputElement!.value\n    _debug('observe', { observing, inputString, defaultString, currentString, outputValues })\n\n    // 空文字の場合は何もしない\n    if (inputString === '') {\n      return\n    }\n\n    // すでに入力されている文字を取り除く\n    const diffResult = diff(defaultString, inputString)\n\n    // 同じだったら何もしない\n    if (currentString === diffResult.diff) {\n      return\n    }\n    currentString = diffResult.diff\n\n    // 変換完了している場合は何もしない\n    if (!observing) {\n      return\n    }\n\n    // セットする\n    _set(currentString)\n  }\n\n  /**\n   * セットする\n   * @param string\n   */\n  function _set(string: string) {\n    _debug('set', { defaultString, string, inputValue, outputValues })\n    const extracted = extractor({\n      input: string,\n      patterns: captureablePatterns,\n    })\n    if (extracted.length === string.length) {\n      inputValue = extracted\n    }\n\n    activeOutputs.forEach(({ element, type }, index) => {\n      const converted = kanaConverter(type, inputValue)\n      _debug('converted', { type, string, inputValue, after: converted, before: outputValues[index] })\n      if (outputTiming === OutputTiming.REALTIME) {\n        element.value = outputValues[index] + converted\n      } else if (outputTiming === OutputTiming.ENTER) {\n        element.dataset['kana'] = outputValues[index] = converted\n      }\n    })\n  }\n\n  /**\n   * 反映する\n   * @returns void\n   */\n  function _reflect() {\n    activeOutputs.forEach(({ element }) => {\n      if (element.dataset['kana']) {\n        element.value += element.dataset['kana']\n        element.removeAttribute('data-kana')\n      }\n    })\n  }\n\n  /**\n   * デバッグログ\n   * @param message\n   * @param args\n   * @return void\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _debug(message: string, ...args: any[]) {\n    if (!options.debug) {\n      return\n    }\n    if (args.length === 0) {\n      console.info('debug', { message })\n      return\n    }\n    console.info('debug', { message }, ...args)\n  }\n\n  /**\n   * Event listeners\n   */\n  inputElement.addEventListener('focus', () => {\n    _debug('focus')\n    _setup()\n  })\n  inputElement.addEventListener('blur', () => {\n    _debug('blur')\n    _end()\n  })\n  inputElement.addEventListener('compositionstart', (e: CompositionEvent) => {\n    _debug('compositionstart', { e })\n    _setup()\n    _start()\n    observing = true\n  })\n  inputElement.addEventListener('compositionend', (e: CompositionEvent) => {\n    _debug('compositionend', { e })\n    _end()\n    _set(inputValue)\n    _reset()\n    observing = false\n  })\n  inputElement.addEventListener('beforeinput', (e: InputEvent) => {\n    _debug('beforeinput', { observing, e })\n    if (!observing && !e.isComposing && e.data) {\n      const candidate = e.data\n      const extracted = extractor({\n        input: candidate,\n        patterns: captureablePatterns,\n      })\n      if (candidate && candidate === extracted) {\n        _setup()\n        _set(candidate)\n      }\n    }\n  })\n  inputElement.addEventListener('keyup', (e: KeyboardEvent) => {\n    _debug('keyup', { observing, e })\n    if (e.code === 'Enter') {\n      if (options.clearOnInputEmpty && inputElement.value === '') {\n        _reset()\n        _set('')\n      } else {\n        if (outputTiming === OutputTiming.ENTER) {\n          _reflect()\n        }\n      }\n    }\n  })\n}\n"],"names":["OutputTiming","OutputTiming2","setupObserver","input","outputs","options","CaptureableCharacterType","captureablePatterns","generateCaptureableRegExp","inputElement","outputTiming","outputTimingIsStatic","_checkOutputTiming","realtime","enter","activeOutputs","_outputParser","output","elements","element","KanaType","observing","defaultString","currentString","inputValue","outputValues","_reset","_debug","i","_setup","index","timer","_start","_observe","_end","inputString","diffResult","diff","_set","string","extracted","extractor","type","converted","kanaConverter","_reflect","message","args","candidate"],"mappings":"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"}