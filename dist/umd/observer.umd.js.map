{"version":3,"file":"observer.umd.js","sources":["../../src/utilities/isHiraganaCharCode.ts","../../src/map/kana/hiragana2hankakuKatakana.ts","../../src/utilities/kanaConverter.ts","../../src/observer.ts"],"sourcesContent":["export function isHiraganaCharCode(char: number): boolean {\n  return (char >= 12353 && char <= 12435) || char == 12445 || char == 12446\n}\n","/**\n * 全角ひらがなから半角への変換表\n */\nexport const katakanaMap: Record<string, string> = {\n  が: 'ｶﾞ',\n  ぎ: 'ｷﾞ',\n  ぐ: 'ｸﾞ',\n  げ: 'ｹﾞ',\n  ご: 'ｺﾞ',\n  ざ: 'ｻﾞ',\n  じ: 'ｼﾞ',\n  ず: 'ｽﾞ',\n  ぜ: 'ｾﾞ',\n  ぞ: 'ｿﾞ',\n  だ: 'ﾀﾞ',\n  ぢ: 'ﾁﾞ',\n  づ: 'ﾂﾞ',\n  で: 'ﾃﾞ',\n  ど: 'ﾄﾞ',\n  ば: 'ﾊﾞ',\n  び: 'ﾋﾞ',\n  ぶ: 'ﾌﾞ',\n  べ: 'ﾍﾞ',\n  ぼ: 'ﾎﾞ',\n  ぱ: 'ﾊﾟ',\n  ぴ: 'ﾋﾟ',\n  ぷ: 'ﾌﾟ',\n  ぺ: 'ﾍﾟ',\n  ぽ: 'ﾎﾟ',\n  ゔ: 'ｳﾞ',\n  あ: 'ｱ',\n  い: 'ｲ',\n  う: 'ｳ',\n  え: 'ｴ',\n  お: 'ｵ',\n  か: 'ｶ',\n  き: 'ｷ',\n  く: 'ｸ',\n  け: 'ｹ',\n  こ: 'ｺ',\n  さ: 'ｻ',\n  し: 'ｼ',\n  す: 'ｽ',\n  せ: 'ｾ',\n  そ: 'ｿ',\n  た: 'ﾀ',\n  ち: 'ﾁ',\n  つ: 'ﾂ',\n  て: 'ﾃ',\n  と: 'ﾄ',\n  な: 'ﾅ',\n  に: 'ﾆ',\n  ぬ: 'ﾇ',\n  ね: 'ﾈ',\n  の: 'ﾉ',\n  は: 'ﾊ',\n  ひ: 'ﾋ',\n  ふ: 'ﾌ',\n  へ: 'ﾍ',\n  ほ: 'ﾎ',\n  ま: 'ﾏ',\n  み: 'ﾐ',\n  む: 'ﾑ',\n  め: 'ﾒ',\n  も: 'ﾓ',\n  や: 'ﾔ',\n  ゆ: 'ﾕ',\n  よ: 'ﾖ',\n  ら: 'ﾗ',\n  り: 'ﾘ',\n  る: 'ﾙ',\n  れ: 'ﾚ',\n  ろ: 'ﾛ',\n  わ: 'ﾜ',\n  を: 'ｦ',\n  ん: 'ﾝ',\n  ぁ: 'ｧ',\n  ぃ: 'ｨ',\n  ぅ: 'ｩ',\n  ぇ: 'ｪ',\n  ぉ: 'ｫ',\n  っ: 'ｯ',\n  ゃ: 'ｬ',\n  ゅ: 'ｭ',\n  ょ: 'ｮ',\n  '。': '｡',\n  '、': '､',\n  ー: 'ｰ',\n  '「': '｢',\n  '」': '｣',\n  '・': '･',\n}\n","import { isHiraganaCharCode } from './isHiraganaCharCode'\nimport { katakanaMap } from '../map/kana/hiragana2hankakuKatakana'\n\nexport enum KanaType {\n  Hiragana,\n  ZenkakuKatakana,\n  HankakuKatakana,\n}\n\nexport function kanaConverter(type: KanaType, strings: string): string {\n  let resultStrings = ''\n  for (let i = 0; i < strings.length; i++) {\n    const char = strings.charCodeAt(i)\n    if (isHiraganaCharCode(char)) {\n      if (type === KanaType.Hiragana) {\n        resultStrings += strings[i]\n      } else if (type === KanaType.ZenkakuKatakana) {\n        resultStrings += String.fromCharCode(char + 96)\n      } else if (type === KanaType.HankakuKatakana) {\n        const string = strings[i]\n        if (typeof katakanaMap[string] === 'string') {\n          resultStrings += katakanaMap[string]\n        }\n      }\n    }\n  }\n  return resultStrings\n}\n","import { kanaConverter, KanaType } from './utilities/kanaConverter'\n\nexport { kanaConverter, KanaType }\n\nexport type Options = {\n  observeInterval?: number; // unit: ms\n  debug?: boolean; // logging if true\n  realtime?: boolean | HTMLInputElement;\n  enter?: boolean | HTMLInputElement;\n  clearOnInputEmpty?: boolean;\n};\nexport type Output = {\n  element: HTMLInputElement;\n  type?: KanaType;\n};\nexport enum OutputMode {\n  REALTIME, // default and priority\n  ENTER,\n}\n\n// eslint-disable-next-line no-irregular-whitespace\nexport const AntiHiraganaPattern = /[^ 　ぁあ-んー]/g\nexport const CompactHiraganaPattern = /[ぁぃぅぇぉっゃゅょ]/g\n\nexport function setupObserver(\n  input: HTMLInputElement,\n  outputs: Output[] | string | string[],\n  options: Options = {\n    observeInterval: 30,\n    debug: false,\n    realtime: true,\n    enter: false,\n    clearOnInputEmpty: false,\n  },\n) {\n  let outputMode = OutputMode.REALTIME\n  function _checkOutputMode() {\n    const realtime =\n      options.realtime &&\n      (options.realtime === true ||\n        (options.realtime instanceof HTMLInputElement && options.realtime.checked))\n    const enter =\n      options.enter &&\n      (options.enter === true ||\n        (options.enter instanceof HTMLInputElement && options.enter.checked))\n    outputMode = realtime || !enter\n      ? OutputMode.REALTIME // realtime=true, realtime=false & enter=false\n      : OutputMode.ENTER  // realtime=false & enter=true\n  }\n\n  // 出力先を整える\n  const activeOutputs: Required<Output>[] = []\n  if (typeof outputs === 'string') {\n    const elements = document.querySelectorAll<HTMLInputElement>(outputs)\n    for (const element of elements) {\n      activeOutputs.push({ element, type: KanaType.Hiragana })\n    }\n  } else {\n    for (const output of outputs) {\n      if (typeof output === 'string') {\n        const elements = document.querySelectorAll<HTMLInputElement>(output)\n        for (const element of elements) {\n          activeOutputs.push({ element, type: KanaType.Hiragana })\n        }\n      } else {\n        activeOutputs.push({\n          element: output.element,\n          type: output.type ?? KanaType.Hiragana,\n        })\n      }\n    }\n  }\n\n  let compositing: boolean = false\n  let defaultString: string = ''\n  let currentString: string = ''\n\n  let inputValue: string = ''\n  const outputValues: string[] = new Array(activeOutputs.length).fill('')\n  /**\n   * 初期化\n   * @returns void\n   */\n  function _reset() {\n    _debug('reset')\n    defaultString = ''\n    currentString = ''\n\n    inputValue = ''\n    for (let i = 0; i < activeOutputs.length; i++) {\n      outputValues[i] = ''\n    }\n  }\n  /**\n   * 初期入力値を保存する\n   * @returns void\n   */\n  function _setup() {\n    defaultString = input.value\n    activeOutputs.forEach(({ element }, index) => {\n      outputValues[index] = element.value\n    })\n    _debug('setup', input.value, { defaultString, activeOutputs })\n  }\n\n  let timer: number | undefined\n  /**\n   * 監視を開始する\n   * @returns void\n   */\n  function _start() {\n    _debug('start', { timer })\n    if (timer) {\n      return\n    }\n    timer = setInterval(() => {\n      _checkOutputMode()\n      _observe()\n    }, options.observeInterval ?? 30)\n  }\n  /**\n   * 監視を終了する\n   * @returns void\n   */\n  function _end() {\n    _debug('end')\n    if (timer) {\n      clearInterval(timer)\n      timer = undefined\n    }\n  }\n\n  /**\n   * 入力を監視する\n   * @return void\n   */\n  function _observe() {\n    let inputString = input.value\n    _debug('observe', { compositing, inputString, defaultString, currentString, outputValues })\n\n    // 空文字の場合は何もしない\n    if (inputString === '') {\n      return\n    }\n\n    // すでに入力されている文字を取り除く\n    if (inputString.indexOf(defaultString) !== -1) {\n      inputString = inputString.replace(defaultString, '')\n    }\n\n    // 同じだったら何もしない\n    if (currentString === inputString) {\n      return\n    }\n    currentString = inputString\n\n    // 変換完了している場合は何もしない\n    if (!compositing) {\n      return\n    }\n\n    // ひらがなを抽出して確認及び設定\n    const hiraganaString = currentString.replace(AntiHiraganaPattern, '')\n    _set(hiraganaString)\n  }\n\n  /**\n   * 保存する\n   * @param hiraganaString\n   */\n  function _set(hiraganaString: string) {\n    _debug('set', { defaultString, hiraganaString, inputValue, outputValues })\n    if (hiraganaString.length) {\n      inputValue = hiraganaString\n    }\n\n    activeOutputs.forEach(({ element, type }, index) => {\n      const converted = kanaConverter(type, inputValue)\n      _debug('converted', { type, inputValue, after: converted, before: outputValues[index] })\n      if (outputMode === OutputMode.REALTIME) {\n        element.value = outputValues[index] + converted\n      } else if (outputMode === OutputMode.ENTER) {\n        element.dataset['kana'] = outputValues[index] = converted\n      }\n    })\n  }\n\n  function _reflect() {\n    activeOutputs.forEach(({ element }) => {\n      if (element.dataset['kana']) {\n        element.value += element.dataset['kana']\n        element.removeAttribute('data-kana')\n      }\n    })\n  }\n\n  /**\n   * デバッグログ\n   * @param message\n   * @param args\n   * @return void\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _debug(message: string, ...args: any[]) {\n    if (!options.debug) {\n      return\n    }\n    if (args.length === 0) {\n      console.info('debug', { message })\n      return\n    }\n    console.info('debug', { message }, ...args)\n  }\n\n  /**\n   * event listeners\n   */\n  input.addEventListener('focus', () => {\n    _debug('focus')\n    _setup()\n  })\n  input.addEventListener('blur', () => {\n    _debug('blur')\n    _end()\n  })\n  input.addEventListener('compositionstart', (e: CompositionEvent) => {\n    _debug('compositionstart', { e })\n    _setup()\n    _start()\n    compositing = true\n  })\n  input.addEventListener('compositionend', (e: CompositionEvent) => {\n    _debug('compositionend', { e })\n    _end()\n    compositing = false\n  })\n  input.addEventListener('keydown', (e: KeyboardEvent) => {\n    _debug('keydown', { compositing, e })\n    if (!compositing) {\n      _setup()\n    }\n\n    if (e.code === 'Enter') {\n      if (options.clearOnInputEmpty && input.value === '') {\n        _reset()\n        _set('')\n      } else {\n        if (outputMode === OutputMode.ENTER) {\n          _reflect()\n        }\n      }\n    }\n  })\n  input.addEventListener('keyup', (e: Event) => {\n    _debug('keyup', { compositing, e })\n  })\n}\n"],"names":["isHiraganaCharCode","char","katakanaMap","KanaType","KanaType2","kanaConverter","type","strings","resultStrings","i","string","OutputMode","OutputMode2","AntiHiraganaPattern","CompactHiraganaPattern","setupObserver","input","outputs","options","outputMode","_checkOutputMode","realtime","enter","activeOutputs","elements","element","output","compositing","defaultString","currentString","inputValue","outputValues","_reset","_debug","_setup","index","timer","_start","_observe","_end","inputString","hiraganaString","_set","converted","_reflect","message","args"],"mappings":"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"}