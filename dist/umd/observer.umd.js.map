{"version":3,"file":"observer.umd.js","sources":["../../src/utilities/diff.ts","../../src/utilities/extractor.ts","../../src/utilities/isHiraganaCharCode.ts","../../src/utilities/toKatakanaCharCode.ts","../../src/maps/kana/hiragana2hankakuKatakana.ts","../../src/maps/kana/alphabet.ts","../../src/maps/kana/number.ts","../../src/maps/kana/symbol.ts","../../src/utilities/kanaConverter.ts","../../src/observer.ts"],"sourcesContent":["/**\n * Diff\n */\nexport type DiffResult = {\n  before: string;\n  after: string;\n  diff: string;\n  same: string;\n  gap: number;\n}\n\nexport function diff(\n  beforeString: string,\n  afterString: string,\n): DiffResult {\n  if (!beforeString.length || !afterString.length) {\n    return {\n      before: beforeString,\n      after: afterString,\n      diff: afterString,\n      same: '',\n      gap: 0,\n    }\n  }\n  if (beforeString === afterString) {\n    return {\n      before: beforeString,\n      after: afterString,\n      diff: '',\n      same: beforeString,\n      gap: 0,\n    }\n  }\n\n  const beforeCharacters = beforeString.split('')\n  const afterCharacters = afterString.split('')\n  const length = Math.max(beforeCharacters.length, afterCharacters.length)\n  const sameCharacters = []\n  const diffCharacters = []\n  let gap = 0\n  for (let i = 0; i < length; i++) {\n    const beforeCharacter = beforeCharacters[i]\n    for (let j = i + gap; j < length; j++, gap++) {\n      const afterCharacter = afterCharacters[j]\n      if (beforeCharacter === afterCharacter) {\n        sameCharacters.push(beforeCharacter)\n        break\n      }\n      diffCharacters.push(afterCharacter)\n    }\n  }\n  return {\n    before: beforeString,\n    after: afterString,\n    diff: diffCharacters.join(''),\n    same: sameCharacters.join(''),\n    gap,\n  }\n}\n","/**\n * Extractable\n */\nexport type CaptureableCharacterPattern = string | RegExp | CaptureableCharacterType;\n\nexport enum CaptureableCharacterType {\n  HIRAGANA,\n  KUTOUTEN,\n  CHOUON,\n  KAGIKAKKO,\n  ZENKAKU_SPACE,\n  HANKAKU_SPACE,\n  ZENKAKU_ALPHABET,\n  HANKAKU_ALPHABET,\n  ZENKAKU_NUMBER,\n  HANKAKU_NUMBER,\n  ZENKAKU_1BYTE_SYMBOL,\n  HANKAKU_1BYTE_SYMBOL,\n}\n\nexport const CaptureableCharacterMap: Record<CaptureableCharacterType, RegExp> = {\n  [CaptureableCharacterType.HIRAGANA]: /[ぁ-ん]/g,\n  [CaptureableCharacterType.KUTOUTEN]: /[、。]/g,\n  [CaptureableCharacterType.CHOUON]: /[ー]/g,\n  [CaptureableCharacterType.KAGIKAKKO]: /[「」]/g,\n  /* eslint-disable-next-line no-irregular-whitespace */\n  [CaptureableCharacterType.ZENKAKU_SPACE]: /[　]/g,\n  [CaptureableCharacterType.HANKAKU_SPACE]: /[ ]/g,\n  [CaptureableCharacterType.ZENKAKU_ALPHABET]: /[Ａ-Ｚａ-ｚ]/g,\n  [CaptureableCharacterType.HANKAKU_ALPHABET]: /[A-Za-z]/g,\n  [CaptureableCharacterType.ZENKAKU_NUMBER]: /[０-９]/g,\n  [CaptureableCharacterType.HANKAKU_NUMBER]: /[0-9]/g,\n  [CaptureableCharacterType.ZENKAKU_1BYTE_SYMBOL]: /[！＂”＃＄％＆＇’（）＊＋，－．／：；＜＝＞？＠［￥］＾＿“｛｜｝～]/g,\n  [CaptureableCharacterType.HANKAKU_1BYTE_SYMBOL]: /[!\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~]/g,\n}\n\nexport type ExtractorInput = {\n  input: string;\n  patterns?: CaptureableCharacterPattern | CaptureableCharacterPattern[];\n}\nexport function extractor({\n  input,\n  patterns = CaptureableCharacterType.HIRAGANA,\n}: ExtractorInput): string {\n  const regExp = patterns instanceof RegExp\n    ? patterns\n    : generateCaptureableRegExp(patterns)\n  const filter = input.replace(regExp, '')\n  if (filter.length === 0) {\n    return input\n  }\n  return input.replace(\n    new RegExp('[' + filter + ']', 'g'),\n    '',\n  )\n}\n\nexport function generateCaptureableRegExp(\n  patterns: CaptureableCharacterPattern | CaptureableCharacterPattern[],\n): RegExp {\n  const sources: string[] = []\n  const _patternParser = (pattern: CaptureableCharacterPattern) => {\n    if (typeof pattern === 'string') {\n      sources.push('[' + pattern + ']')\n    } else if (pattern instanceof RegExp) {\n      sources.push(pattern.source)\n    } else {\n      sources.push(CaptureableCharacterMap[pattern].source)\n    }\n  }\n\n  if (Array.isArray(patterns)) {\n    for (const pattern of patterns) {\n      _patternParser(pattern)\n    }\n  } else {\n    _patternParser(patterns)\n  }\n  return new RegExp(sources.join('|'), 'g')\n}\n","export function isHiraganaCharCode(char: number): boolean {\n  return (char >= 0x3041 && char <= 0x3096)\n      || (char >= 0x309D && char <= 0x309E)\n}\n","export function toKatakanaCharCode(char: number): number {\n  return char + 96\n}\n","/**\n * 全角ひらがなから半角への変換表\n */\nexport const katakanaMap: Record<string, string> = {\n  が: 'ｶﾞ',\n  ぎ: 'ｷﾞ',\n  ぐ: 'ｸﾞ',\n  げ: 'ｹﾞ',\n  ご: 'ｺﾞ',\n  ざ: 'ｻﾞ',\n  じ: 'ｼﾞ',\n  ず: 'ｽﾞ',\n  ぜ: 'ｾﾞ',\n  ぞ: 'ｿﾞ',\n  だ: 'ﾀﾞ',\n  ぢ: 'ﾁﾞ',\n  づ: 'ﾂﾞ',\n  で: 'ﾃﾞ',\n  ど: 'ﾄﾞ',\n  ば: 'ﾊﾞ',\n  び: 'ﾋﾞ',\n  ぶ: 'ﾌﾞ',\n  べ: 'ﾍﾞ',\n  ぼ: 'ﾎﾞ',\n  ぱ: 'ﾊﾟ',\n  ぴ: 'ﾋﾟ',\n  ぷ: 'ﾌﾟ',\n  ぺ: 'ﾍﾟ',\n  ぽ: 'ﾎﾟ',\n  ゔ: 'ｳﾞ',\n  あ: 'ｱ',\n  い: 'ｲ',\n  う: 'ｳ',\n  え: 'ｴ',\n  お: 'ｵ',\n  か: 'ｶ',\n  き: 'ｷ',\n  く: 'ｸ',\n  け: 'ｹ',\n  こ: 'ｺ',\n  さ: 'ｻ',\n  し: 'ｼ',\n  す: 'ｽ',\n  せ: 'ｾ',\n  そ: 'ｿ',\n  た: 'ﾀ',\n  ち: 'ﾁ',\n  つ: 'ﾂ',\n  て: 'ﾃ',\n  と: 'ﾄ',\n  な: 'ﾅ',\n  に: 'ﾆ',\n  ぬ: 'ﾇ',\n  ね: 'ﾈ',\n  の: 'ﾉ',\n  は: 'ﾊ',\n  ひ: 'ﾋ',\n  ふ: 'ﾌ',\n  へ: 'ﾍ',\n  ほ: 'ﾎ',\n  ま: 'ﾏ',\n  み: 'ﾐ',\n  む: 'ﾑ',\n  め: 'ﾒ',\n  も: 'ﾓ',\n  や: 'ﾔ',\n  ゆ: 'ﾕ',\n  よ: 'ﾖ',\n  ら: 'ﾗ',\n  り: 'ﾘ',\n  る: 'ﾙ',\n  れ: 'ﾚ',\n  ろ: 'ﾛ',\n  わ: 'ﾜ',\n  を: 'ｦ',\n  ん: 'ﾝ',\n  ぁ: 'ｧ',\n  ぃ: 'ｨ',\n  ぅ: 'ｩ',\n  ぇ: 'ｪ',\n  ぉ: 'ｫ',\n  っ: 'ｯ',\n  ゃ: 'ｬ',\n  ゅ: 'ｭ',\n  ょ: 'ｮ',\n  '。': '｡',\n  '、': '､',\n  'ー': 'ｰ',\n  '「': '｢',\n  '」': '｣',\n  '・': '･',\n}\n","/**\n * 英字の全角文字を半角文字に変換するためのマップ\n */\nexport const alphabetMap: Record<string, string> = {\n  'Ａ': 'A',\n  'Ｂ': 'B',\n  'Ｃ': 'C',\n  'Ｄ': 'D',\n  'Ｅ': 'E',\n  'Ｆ': 'F',\n  'Ｇ': 'G',\n  'Ｈ': 'H',\n  'Ｉ': 'I',\n  'Ｊ': 'J',\n  'Ｋ': 'K',\n  'Ｌ': 'L',\n  'Ｍ': 'M',\n  'Ｎ': 'N',\n  'Ｏ': 'O',\n  'Ｐ': 'P',\n  'Ｑ': 'Q',\n  'Ｒ': 'R',\n  'Ｓ': 'S',\n  'Ｔ': 'T',\n  'Ｕ': 'U',\n  'Ｖ': 'V',\n  'Ｗ': 'W',\n  'Ｘ': 'X',\n  'Ｙ': 'Y',\n  'Ｚ': 'Z',\n  'ａ': 'a',\n  'ｂ': 'b',\n  'ｃ': 'c',\n  'ｄ': 'd',\n  'ｅ': 'e',\n  'ｆ': 'f',\n  'ｇ': 'g',\n  'ｈ': 'h',\n  'ｉ': 'i',\n  'ｊ': 'j',\n  'ｋ': 'k',\n  'ｌ': 'l',\n  'ｍ': 'm',\n  'ｎ': 'n',\n  'ｏ': 'o',\n  'ｐ': 'p',\n  'ｑ': 'q',\n  'ｒ': 'r',\n  'ｓ': 's',\n  'ｔ': 't',\n  'ｕ': 'u',\n  'ｖ': 'v',\n  'ｗ': 'w',\n  'ｘ': 'x',\n  'ｙ': 'y',\n  'ｚ': 'z',\n}\n","/**\n * 数字の全角文字を半角文字に変換するためのマップ\n */\nexport const numberMap: Record<string, string> = {\n  '０': '0',\n  '１': '1',\n  '２': '2',\n  '３': '3',\n  '４': '4',\n  '５': '5',\n  '６': '6',\n  '７': '7',\n  '８': '8',\n  '９': '9',\n}\n","/**\n * ASCII で英数の前後にある記号のマップ\n */\nexport const symbolMap: Record<string, string> = {\n  '　': ' ',\n  '！': '!',\n  '＂': '\"',\n  '”': '\"',\n  '＃': '#',\n  '＄': '$',\n  '％': '%',\n  '＆': '&',\n  '＇': '\\'',\n  '’': '\\'',\n  '（': '(',\n  '）': ')',\n  '＊': '*',\n  '＋': '+',\n  '，': ',',\n  '－': '-',\n  '．': '.',\n  '／': '/',\n  '：': ':',\n  '；': ';',\n  '＜': '<',\n  '＝': '=',\n  '＞': '>',\n  '？': '?',\n  '＠': '@',\n  '［': '[',\n  '￥': '\\\\',\n  '］': ']',\n  '＾': '^',\n  '＿': '_',\n  '“': '`',\n  '｛': '{',\n  '｜': '|',\n  '｝': '}',\n  '～': '~',\n}\n","import { isHiraganaCharCode } from './isHiraganaCharCode'\nimport { toKatakanaCharCode } from './toKatakanaCharCode'\nimport { katakanaMap } from '../maps/kana/hiragana2hankakuKatakana'\nimport { alphabetMap } from '../maps/kana/alphabet'\nimport { numberMap } from '../maps/kana/number'\nimport { symbolMap } from '../maps/kana/symbol'\n\nexport enum KanaType {\n  Hiragana,\n  ZenkakuKatakana,\n  HankakuKatakana,\n}\n\nexport function kanaConverter(type: KanaType, strings: string): string {\n  let convertedStrings = ''\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    if (type === KanaType.Hiragana) {\n      convertedStrings += string\n    } else if (type === KanaType.ZenkakuKatakana) {\n      const char = strings.charCodeAt(i)\n      if (isHiraganaCharCode(char)) {\n        convertedStrings += String.fromCharCode(toKatakanaCharCode(char))\n      } else {\n        convertedStrings += string\n      }\n    } else if (type === KanaType.HankakuKatakana) {\n      if (typeof katakanaMap[string] === 'string') {\n        convertedStrings += katakanaMap[string]\n      } else if (typeof alphabetMap[string] === 'string') {\n        convertedStrings += alphabetMap[string]\n      } else if (typeof numberMap[string] === 'string') {\n        convertedStrings += numberMap[string]\n      } else if (typeof symbolMap[string] === 'string') {\n        convertedStrings += symbolMap[string]\n      } else {\n        convertedStrings += string\n      }\n    }\n  }\n  return convertedStrings\n}\n","import { diff } from './utilities/diff'\nimport { CaptureableCharacterPattern, CaptureableCharacterType, extractor, generateCaptureableRegExp } from './utilities/extractor'\nimport { kanaConverter, KanaType } from './utilities/kanaConverter'\nexport { KanaType, CaptureableCharacterType }\nexport type { CaptureableCharacterPattern }\n\nexport type Options = {\n  observeInterval?: number; // unit: ms\n  debug?: boolean; // logging if true\n  realtime?: boolean | HTMLInputElement;\n  enter?: boolean | HTMLInputElement;\n  clearOnInputEmpty?: boolean;\n  captureablePatterns?: CaptureableCharacterPattern | CaptureableCharacterPattern[];\n};\n\n// TODO: support other elements (e.g. HTMLDivElement, HTMLSpanElement, HTMLTextAreaElement)\nexport type OutputElement = Output | HTMLInputElement | string;\nexport type Output = {\n  element: HTMLInputElement;\n  type?: KanaType;\n};\nexport enum OutputTiming {\n  REALTIME, // default and priority\n  ENTER,\n}\n\nexport function setupObserver(\n  input: HTMLInputElement | string, // TODO: support textarea (HTMLTextAreaElement)\n  outputs: OutputElement | OutputElement[],\n  options: Options = {\n    observeInterval: 30,\n    debug: false,\n    realtime: true,\n    enter: false,\n    clearOnInputEmpty: false,\n    captureablePatterns: CaptureableCharacterType.HIRAGANA,\n  },\n) {\n  // 入力値を受け付けるパターン\n  const captureablePatterns = generateCaptureableRegExp(\n    options.captureablePatterns ?? CaptureableCharacterType.HIRAGANA,\n  )\n\n  // 入力元を整える\n  const inputElement = typeof input === 'string'\n    ? document.querySelector<HTMLInputElement>(input)\n    : input\n  if (!inputElement) {\n    throw new Error('input element not found')\n  }\n\n  // 出力のタイミング\n  let outputTiming = OutputTiming.REALTIME\n  function _checkOutputTiming() {\n    const realtime =\n      options.realtime &&\n      (options.realtime === true ||\n        (options.realtime instanceof HTMLInputElement && options.realtime.checked))\n    const enter =\n      options.enter &&\n      (options.enter === true ||\n        (options.enter instanceof HTMLInputElement && options.enter.checked))\n    outputTiming = realtime || !enter\n      ? OutputTiming.REALTIME // realtime=true, realtime=false & enter=false\n      : OutputTiming.ENTER  // realtime=false & enter=true\n  }\n\n  // 出力先を整える\n  const activeOutputs: Required<Output>[] = []\n  const _outputParser = (output: OutputElement): void => {\n    if (typeof output === 'string') {\n      const elements = document.querySelectorAll<HTMLInputElement>(output)\n      for (const element of elements) {\n        activeOutputs.push({ element, type: KanaType.Hiragana })\n      }\n    } else if (output instanceof HTMLInputElement) {\n      activeOutputs.push({ element: output, type: KanaType.Hiragana })\n    } else {\n      activeOutputs.push({\n        element: output.element,\n        type: output.type ?? KanaType.Hiragana,\n      })\n    }\n  }\n  if (Array.isArray(outputs)) {\n    for (const output of outputs) {\n      _outputParser(output)\n    }\n  } else {\n    _outputParser(outputs)\n  }\n\n  // 状態管理\n  let observing: boolean = false\n  let defaultString: string = ''\n  let currentString: string = ''\n\n  let inputValue: string = ''\n  const outputValues: string[] = new Array(activeOutputs.length).fill('')\n  /**\n   * 初期化\n   * @returns void\n   */\n  function _reset() {\n    _debug('reset')\n    defaultString = ''\n    currentString = ''\n\n    inputValue = ''\n    for (let i = 0; i < activeOutputs.length; i++) {\n      outputValues[i] = ''\n    }\n  }\n  /**\n   * 初期入力値を保存する\n   * @returns void\n   */\n  function _setup() {\n    defaultString = inputElement!.value\n    activeOutputs.forEach(({ element }, index) => {\n      outputValues[index] = element.value\n    })\n    _debug('setup', inputElement!.value, { defaultString, activeOutputs })\n  }\n\n  let timer: number | undefined\n  /**\n   * 監視を開始する\n   * @returns void\n   */\n  function _start() {\n    _debug('start', { timer })\n    if (timer) {\n      return\n    }\n    timer = setInterval(() => {\n      _checkOutputTiming()\n      _observe()\n    }, options.observeInterval ?? 30)\n  }\n  /**\n   * 監視を終了する\n   * @returns void\n   */\n  function _end() {\n    _debug('end', { timer })\n    if (timer) {\n      clearInterval(timer)\n      timer = undefined\n    }\n  }\n\n  /**\n   * 入力を監視する\n   * @return void\n   */\n  function _observe() {\n    let inputString = inputElement!.value\n    _debug('observe', { observing, inputString, defaultString, currentString, outputValues })\n\n    // 空文字の場合は何もしない\n    if (inputString === '') {\n      return\n    }\n\n    // すでに入力されている文字を取り除く\n    const diffResult = diff(defaultString, inputString)\n    inputString = diffResult.diff\n\n    // 同じだったら何もしない\n    if (currentString === inputString) {\n      return\n    }\n    currentString = inputString\n\n    // 変換完了している場合は何もしない\n    if (!observing) {\n      return\n    }\n\n    // セットする\n    _set(currentString)\n  }\n\n  /**\n   * セットする\n   * @param string\n   */\n  function _set(string: string) {\n    _debug('set', { defaultString, string, inputValue, outputValues })\n    const extracted = extractor({\n      input: string,\n      patterns: captureablePatterns,\n    })\n    if (extracted.length === string.length) {\n      inputValue = extracted\n    }\n\n    activeOutputs.forEach(({ element, type }, index) => {\n      const converted = kanaConverter(type, inputValue)\n      _debug('converted', { type, string, inputValue, after: converted, before: outputValues[index] })\n      if (outputTiming === OutputTiming.REALTIME) {\n        element.value = outputValues[index] + converted\n      } else if (outputTiming === OutputTiming.ENTER) {\n        element.dataset['kana'] = outputValues[index] = converted\n      }\n    })\n  }\n\n  /**\n   * 反映する\n   * @returns void\n   */\n  function _reflect() {\n    activeOutputs.forEach(({ element }) => {\n      if (element.dataset['kana']) {\n        element.value += element.dataset['kana']\n        element.removeAttribute('data-kana')\n      }\n    })\n  }\n\n  /**\n   * デバッグログ\n   * @param message\n   * @param args\n   * @return void\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _debug(message: string, ...args: any[]) {\n    if (!options.debug) {\n      return\n    }\n    if (args.length === 0) {\n      console.info('debug', { message })\n      return\n    }\n    console.info('debug', { message }, ...args)\n  }\n\n  /**\n   * Event listeners\n   */\n  inputElement.addEventListener('focus', () => {\n    _debug('focus')\n    _setup()\n  })\n  inputElement.addEventListener('blur', () => {\n    _debug('blur')\n    _end()\n  })\n  inputElement.addEventListener('compositionstart', (e: CompositionEvent) => {\n    _debug('compositionstart', { e })\n    _setup()\n    _start()\n    observing = true\n  })\n  inputElement.addEventListener('compositionend', (e: CompositionEvent) => {\n    _debug('compositionend', { e })\n    _end()\n    _set(inputValue)\n    _reset()\n    observing = false\n  })\n  inputElement.addEventListener('keydown', (e: KeyboardEvent) => {\n    _debug('keydown', { observing, e })\n    if (!observing) {\n      _setup()\n    }\n\n    if (e.code === 'Enter') {\n      if (options.clearOnInputEmpty && inputElement.value === '') {\n        _reset()\n        _set('')\n      } else {\n        if (outputTiming === OutputTiming.ENTER) {\n          _reflect()\n        }\n      }\n    }\n  })\n  inputElement.addEventListener('keyup', (e: Event) => {\n    _debug('keyup', { observing, e })\n  })\n}\n"],"names":["diff","beforeString","afterString","beforeCharacters","afterCharacters","length","sameCharacters","diffCharacters","gap","i","beforeCharacter","j","afterCharacter","CaptureableCharacterType","CaptureableCharacterType2","CaptureableCharacterMap","extractor","input","patterns","regExp","generateCaptureableRegExp","filter","sources","_patternParser","pattern","isHiraganaCharCode","char","toKatakanaCharCode","katakanaMap","alphabetMap","numberMap","symbolMap","KanaType","KanaType2","kanaConverter","type","strings","convertedStrings","string","OutputTiming","OutputTiming2","setupObserver","outputs","options","captureablePatterns","inputElement","outputTiming","_checkOutputTiming","realtime","enter","activeOutputs","_outputParser","output","elements","element","observing","defaultString","currentString","inputValue","outputValues","_reset","_debug","_setup","index","timer","_start","_observe","_end","inputString","_set","extracted","converted","_reflect","message","args","e"],"mappings":"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"}