{"version":3,"file":"observer.umd.js","sources":["../../src/utilities/extractor.ts","../../src/utilities/isHiraganaCharCode.ts","../../src/utilities/toKatakanaCharCode.ts","../../src/map/kana/hiragana2hankakuKatakana.ts","../../src/utilities/kanaConverter.ts","../../src/observer.ts"],"sourcesContent":["/**\n * Extractable\n */\nexport type CaptureableCharacterPattern = string | RegExp | CaptureableCharacterType;\n\nexport enum CaptureableCharacterType {\n  HIRAGANA,\n  KUTOUTEN,\n  CHOUON,\n  ZENKAKU_SPACE,\n  HANKAKU_SPACE,\n  ZENKAKU_ALPHABET,\n  HANKAKU_ALPHABET,\n  ZENKAKU_NUMBER,\n  HANKAKU_NUMBER,\n  ZENKAKU_1BYTE_SYMBOL,\n  HANKAKU_1BYTE_SYMBOL,\n}\n\nexport const CaptureableCharacterMap: Record<CaptureableCharacterType, RegExp> = {\n  [CaptureableCharacterType.HIRAGANA]: /[ぁ-ん]/g,\n  [CaptureableCharacterType.KUTOUTEN]: /[、。]/g,\n  [CaptureableCharacterType.CHOUON]: /[ー]/g,\n  /* eslint-disable-next-line no-irregular-whitespace */\n  [CaptureableCharacterType.ZENKAKU_SPACE]: /[　]/g,\n  [CaptureableCharacterType.HANKAKU_SPACE]: /[ ]/g,\n  [CaptureableCharacterType.ZENKAKU_ALPHABET]: /[Ａ-Ｚａ-ｚ]/g,\n  [CaptureableCharacterType.HANKAKU_ALPHABET]: /[A-Za-z]/g,\n  [CaptureableCharacterType.ZENKAKU_NUMBER]: /[０-９]/g,\n  [CaptureableCharacterType.HANKAKU_NUMBER]: /[0-9]/g,\n  [CaptureableCharacterType.ZENKAKU_1BYTE_SYMBOL]: /[！＂＃＄％＆＇（）＊＋，－．／：；＜＝＞？＠［￥］＾＿“｛｜｝～]/g,\n  /* eslint-disable-next-line no-useless-escape*/\n  [CaptureableCharacterType.HANKAKU_1BYTE_SYMBOL]: /[!\"#$%&'()*+,-.\\/:;<=>?@[\\\\]^_`{|}~]/g,\n}\n\nexport type ExtractorInput = {\n  input: string;\n  patterns?: CaptureableCharacterPattern | CaptureableCharacterPattern[];\n}\nexport function extractor({\n  input,\n  patterns = CaptureableCharacterType.HIRAGANA,\n}: ExtractorInput): string {\n  const sources: string[] = []\n  const patternParser = (pattern: CaptureableCharacterPattern) => {\n    if (typeof pattern === 'string') {\n      sources.push('[' + pattern + ']')\n    } else if (pattern instanceof RegExp) {\n      sources.push(pattern.source)\n    } else {\n      sources.push(CaptureableCharacterMap[pattern].source)\n    }\n  }\n\n  if (Array.isArray(patterns)) {\n    for (const pattern of patterns) {\n      patternParser(pattern)\n    }\n  } else {\n    patternParser(patterns)\n  }\n  if (sources.length === 0) {\n    return input\n  }\n\n  const regExp = new RegExp(sources.join('|'), 'g')\n  const filter = input.replace(regExp, '')\n  if (filter.length === 0) {\n    return input\n  }\n  return input.replace(\n    new RegExp('[' + filter + ']', 'g'),\n    '',\n  )\n}\n","export function isHiraganaCharCode(char: number): boolean {\n  return (char >= 12353 && char <= 12435) || char == 12445 || char == 12446\n}\n","export function toKatakanaCharCode(char: number): number {\n  return char + 96\n}\n","/**\n * 全角ひらがなから半角への変換表\n */\nexport const katakanaMap: Record<string, string> = {\n  が: 'ｶﾞ',\n  ぎ: 'ｷﾞ',\n  ぐ: 'ｸﾞ',\n  げ: 'ｹﾞ',\n  ご: 'ｺﾞ',\n  ざ: 'ｻﾞ',\n  じ: 'ｼﾞ',\n  ず: 'ｽﾞ',\n  ぜ: 'ｾﾞ',\n  ぞ: 'ｿﾞ',\n  だ: 'ﾀﾞ',\n  ぢ: 'ﾁﾞ',\n  づ: 'ﾂﾞ',\n  で: 'ﾃﾞ',\n  ど: 'ﾄﾞ',\n  ば: 'ﾊﾞ',\n  び: 'ﾋﾞ',\n  ぶ: 'ﾌﾞ',\n  べ: 'ﾍﾞ',\n  ぼ: 'ﾎﾞ',\n  ぱ: 'ﾊﾟ',\n  ぴ: 'ﾋﾟ',\n  ぷ: 'ﾌﾟ',\n  ぺ: 'ﾍﾟ',\n  ぽ: 'ﾎﾟ',\n  ゔ: 'ｳﾞ',\n  あ: 'ｱ',\n  い: 'ｲ',\n  う: 'ｳ',\n  え: 'ｴ',\n  お: 'ｵ',\n  か: 'ｶ',\n  き: 'ｷ',\n  く: 'ｸ',\n  け: 'ｹ',\n  こ: 'ｺ',\n  さ: 'ｻ',\n  し: 'ｼ',\n  す: 'ｽ',\n  せ: 'ｾ',\n  そ: 'ｿ',\n  た: 'ﾀ',\n  ち: 'ﾁ',\n  つ: 'ﾂ',\n  て: 'ﾃ',\n  と: 'ﾄ',\n  な: 'ﾅ',\n  に: 'ﾆ',\n  ぬ: 'ﾇ',\n  ね: 'ﾈ',\n  の: 'ﾉ',\n  は: 'ﾊ',\n  ひ: 'ﾋ',\n  ふ: 'ﾌ',\n  へ: 'ﾍ',\n  ほ: 'ﾎ',\n  ま: 'ﾏ',\n  み: 'ﾐ',\n  む: 'ﾑ',\n  め: 'ﾒ',\n  も: 'ﾓ',\n  や: 'ﾔ',\n  ゆ: 'ﾕ',\n  よ: 'ﾖ',\n  ら: 'ﾗ',\n  り: 'ﾘ',\n  る: 'ﾙ',\n  れ: 'ﾚ',\n  ろ: 'ﾛ',\n  わ: 'ﾜ',\n  を: 'ｦ',\n  ん: 'ﾝ',\n  ぁ: 'ｧ',\n  ぃ: 'ｨ',\n  ぅ: 'ｩ',\n  ぇ: 'ｪ',\n  ぉ: 'ｫ',\n  っ: 'ｯ',\n  ゃ: 'ｬ',\n  ゅ: 'ｭ',\n  ょ: 'ｮ',\n  '。': '｡',\n  '、': '､',\n  'ー': 'ｰ',\n  '「': '｢',\n  '」': '｣',\n  '・': '･',\n}\n","import { isHiraganaCharCode } from './isHiraganaCharCode'\nimport { toKatakanaCharCode } from './toKatakanaCharCode'\nimport { katakanaMap } from '../map/kana/hiragana2hankakuKatakana'\n\nexport enum KanaType {\n  Hiragana,\n  ZenkakuKatakana,\n  HankakuKatakana,\n}\n\nexport function kanaConverter(type: KanaType, strings: string): string {\n  let convertedStrings = ''\n  for (let i = 0; i < strings.length; i++) {\n    const char = strings.charCodeAt(i)\n    if (!isHiraganaCharCode(char)) {\n      convertedStrings += strings[i]\n      continue\n    }\n\n    if (type === KanaType.Hiragana) {\n      convertedStrings += strings[i]\n    } else if (type === KanaType.ZenkakuKatakana) {\n      convertedStrings += String.fromCharCode(toKatakanaCharCode(char))\n    } else if (type === KanaType.HankakuKatakana) {\n      const string = strings[i]\n      if (typeof katakanaMap[string] === 'string') {\n        convertedStrings += katakanaMap[string]\n      }\n    }\n  }\n  return convertedStrings\n}\n","import { CaptureableCharacterPattern, CaptureableCharacterType, extractor } from './utilities/extractor'\nimport { kanaConverter, KanaType } from './utilities/kanaConverter'\nexport { KanaType, CaptureableCharacterType }\nexport type { CaptureableCharacterPattern }\n\nexport type Options = {\n  observeInterval?: number; // unit: ms\n  debug?: boolean; // logging if true\n  realtime?: boolean | HTMLInputElement;\n  enter?: boolean | HTMLInputElement;\n  clearOnInputEmpty?: boolean;\n  captureablePatterns?: CaptureableCharacterPattern | CaptureableCharacterPattern[];\n};\nexport type Output = {\n  element: HTMLInputElement;\n  type?: KanaType;\n};\nexport enum OutputMode {\n  REALTIME, // default and priority\n  ENTER,\n}\n\nexport function setupObserver(\n  input: HTMLInputElement,\n  outputs: (Output | string)[] | string,\n  options: Options = {\n    observeInterval: 30,\n    debug: false,\n    realtime: true,\n    enter: false,\n    clearOnInputEmpty: false,\n    captureablePatterns: CaptureableCharacterType.HIRAGANA,\n  },\n) {\n  let outputMode = OutputMode.REALTIME\n  function _checkOutputMode() {\n    const realtime =\n      options.realtime &&\n      (options.realtime === true ||\n        (options.realtime instanceof HTMLInputElement && options.realtime.checked))\n    const enter =\n      options.enter &&\n      (options.enter === true ||\n        (options.enter instanceof HTMLInputElement && options.enter.checked))\n    outputMode = realtime || !enter\n      ? OutputMode.REALTIME // realtime=true, realtime=false & enter=false\n      : OutputMode.ENTER  // realtime=false & enter=true\n  }\n\n  // 出力先を整える\n  const activeOutputs: Required<Output>[] = []\n  if (typeof outputs === 'string') {\n    const elements = document.querySelectorAll<HTMLInputElement>(outputs)\n    for (const element of elements) {\n      activeOutputs.push({ element, type: KanaType.Hiragana })\n    }\n  } else {\n    for (const output of outputs) {\n      if (typeof output === 'string') {\n        const elements = document.querySelectorAll<HTMLInputElement>(output)\n        for (const element of elements) {\n          activeOutputs.push({ element, type: KanaType.Hiragana })\n        }\n      } else {\n        activeOutputs.push({\n          element: output.element,\n          type: output.type ?? KanaType.Hiragana,\n        })\n      }\n    }\n  }\n\n  let compositing: boolean = false\n  let defaultString: string = ''\n  let currentString: string = ''\n\n  let inputValue: string = ''\n  const outputValues: string[] = new Array(activeOutputs.length).fill('')\n  /**\n   * 初期化\n   * @returns void\n   */\n  function _reset() {\n    _debug('reset')\n    defaultString = ''\n    currentString = ''\n\n    inputValue = ''\n    for (let i = 0; i < activeOutputs.length; i++) {\n      outputValues[i] = ''\n    }\n  }\n  /**\n   * 初期入力値を保存する\n   * @returns void\n   */\n  function _setup() {\n    defaultString = input.value\n    activeOutputs.forEach(({ element }, index) => {\n      outputValues[index] = element.value\n    })\n    _debug('setup', input.value, { defaultString, activeOutputs })\n  }\n\n  let timer: number | undefined\n  /**\n   * 監視を開始する\n   * @returns void\n   */\n  function _start() {\n    _debug('start', { timer })\n    if (timer) {\n      return\n    }\n    timer = setInterval(() => {\n      _checkOutputMode()\n      _observe()\n    }, options.observeInterval ?? 30)\n  }\n  /**\n   * 監視を終了する\n   * @returns void\n   */\n  function _end() {\n    _debug('end', { timer })\n    if (timer) {\n      clearInterval(timer)\n      timer = undefined\n    }\n  }\n\n  /**\n   * 入力を監視する\n   * @return void\n   */\n  function _observe() {\n    let inputString = input.value\n    _debug('observe', { compositing, inputString, defaultString, currentString, outputValues })\n\n    // 空文字の場合は何もしない\n    if (inputString === '') {\n      return\n    }\n\n    // すでに入力されている文字を取り除く\n    inputString = inputString.replace(\n      new RegExp('[' + defaultString + ']', 'g'),\n      '',\n    )\n\n    // 同じだったら何もしない\n    if (currentString === inputString) {\n      return\n    }\n    currentString = inputString\n\n    // 変換完了している場合は何もしない\n    if (!compositing) {\n      return\n    }\n\n    // セットする\n    _set(currentString)\n  }\n\n  /**\n   * セットする\n   * @param string\n   */\n  function _set(string: string) {\n    _debug('set', { defaultString, string, inputValue, outputValues })\n    const extracted = extractor({\n      input: string,\n      patterns: options.captureablePatterns ?? CaptureableCharacterType.HIRAGANA,\n    })\n    console.warn({ extracted, string, inputValue, defaultString })\n    if (extracted.length === string.length) {\n      inputValue = extracted\n    }\n\n    activeOutputs.forEach(({ element, type }, index) => {\n      const converted = kanaConverter(type, inputValue)\n      _debug('converted', { type, string, inputValue, after: converted, before: outputValues[index] })\n      if (outputMode === OutputMode.REALTIME) {\n        element.value = outputValues[index] + converted\n      } else if (outputMode === OutputMode.ENTER) {\n        element.dataset['kana'] = outputValues[index] = converted\n      }\n    })\n  }\n\n  /**\n   * 反映する\n   * @returns void\n   */\n  function _reflect() {\n    activeOutputs.forEach(({ element }) => {\n      if (element.dataset['kana']) {\n        element.value += element.dataset['kana']\n        element.removeAttribute('data-kana')\n      }\n    })\n  }\n\n  /**\n   * デバッグログ\n   * @param message\n   * @param args\n   * @return void\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _debug(message: string, ...args: any[]) {\n    if (!options.debug) {\n      return\n    }\n    if (args.length === 0) {\n      console.info('debug', { message })\n      return\n    }\n    console.info('debug', { message }, ...args)\n  }\n\n  /**\n   * event listeners\n   */\n  input.addEventListener('focus', () => {\n    _debug('focus')\n    _setup()\n  })\n  input.addEventListener('blur', () => {\n    _debug('blur')\n    _end()\n  })\n  input.addEventListener('compositionstart', (e: CompositionEvent) => {\n    _debug('compositionstart', { e })\n    _setup()\n    _start()\n    compositing = true\n  })\n  input.addEventListener('compositionend', (e: CompositionEvent) => {\n    _debug('compositionend', { e })\n    _end()\n    _set(inputValue)\n    _reset()\n    compositing = false\n  })\n  input.addEventListener('keydown', (e: KeyboardEvent) => {\n    _debug('keydown', { compositing, e })\n    if (!compositing) {\n      _setup()\n    }\n\n    if (e.code === 'Enter') {\n      if (options.clearOnInputEmpty && input.value === '') {\n        _reset()\n        _set('')\n      } else {\n        if (outputMode === OutputMode.ENTER) {\n          _reflect()\n        }\n      }\n    }\n  })\n  input.addEventListener('keyup', (e: Event) => {\n    _debug('keyup', { compositing, e })\n  })\n}\n"],"names":["CaptureableCharacterType","CaptureableCharacterType2","CaptureableCharacterMap","extractor","input","patterns","sources","patternParser","pattern","regExp","filter","isHiraganaCharCode","char","toKatakanaCharCode","katakanaMap","KanaType","KanaType2","kanaConverter","type","strings","convertedStrings","i","string","OutputMode","OutputMode2","setupObserver","outputs","options","outputMode","_checkOutputMode","realtime","enter","activeOutputs","elements","element","output","compositing","defaultString","currentString","inputValue","outputValues","_reset","_debug","_setup","index","timer","_start","_observe","_end","inputString","_set","extracted","converted","_reflect","message","args","e"],"mappings":"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"}