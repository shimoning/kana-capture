{"version":3,"file":"index.js","sources":["../../src/utilities/diff.ts","../../src/utilities/extractor.ts","../../src/utilities/isHiraganaCharCode.ts","../../src/utilities/toKatakanaCharCode.ts","../../src/maps/kana/hiragana2hankakuKatakana.ts","../../src/maps/kana/alphabet.ts","../../src/maps/kana/number.ts","../../src/maps/kana/symbol.ts","../../src/utilities/kanaConverter.ts","../../src/index.ts"],"sourcesContent":["/**\n * 文字列比較を行う関数\n *\n * あくまでこのライブラリのためだけに作成したものなので汎用性はない\n */\nexport type DiffResult = {\n  before: string;\n  after: string;\n  diff: string;\n  same: string;\n  gap: number;\n}\n\nexport function diff(beforeString: string, afterString: string): DiffResult\n{\n  if (!beforeString.length || !afterString.length) {\n    return {\n      before: beforeString,\n      after: afterString,\n      diff: afterString,\n      same: '',\n      gap: 0,\n    }\n  }\n  if (beforeString === afterString) {\n    return {\n      before: beforeString,\n      after: afterString,\n      diff: '',\n      same: beforeString,\n      gap: 0,\n    }\n  }\n\n  const beforeCharacters = beforeString.split('')\n  const afterCharacters = afterString.split('')\n  const length = Math.max(beforeCharacters.length, afterCharacters.length)\n  const sameCharacters = []\n  const diffCharacters = []\n  let gap = 0\n  for (let i = 0; i < length; i++) {\n    const beforeCharacter = beforeCharacters[i]\n    for (let j = i + gap; j < length; j++, gap++) {\n      const afterCharacter = afterCharacters[j]\n      if (beforeCharacter === afterCharacter) {\n        sameCharacters.push(beforeCharacter)\n        break\n      }\n      diffCharacters.push(afterCharacter)\n    }\n  }\n\n  return {\n    before: beforeString,\n    after: afterString,\n    diff: diffCharacters.join(''),\n    same: sameCharacters.join(''),\n    gap,\n  }\n}\n","/**\n * Extractable\n */\nexport type CapturableCharacterPattern = string | RegExp | CapturableCharacterType;\n\nexport enum CapturableCharacterType {\n  HIRAGANA,\n  KUTOUTEN,\n  CHOUON,\n  KAGIKAKKO,\n  ZENKAKU_SPACE,\n  HANKAKU_SPACE,\n  ZENKAKU_ALPHABET,\n  HANKAKU_ALPHABET,\n  ZENKAKU_NUMBER,\n  HANKAKU_NUMBER,\n  ZENKAKU_1BYTE_SYMBOL,\n  HANKAKU_1BYTE_SYMBOL,\n}\n\nexport const CapturableCharacterMap: Record<CapturableCharacterType, RegExp> = {\n  [CapturableCharacterType.HIRAGANA]: /[ぁ-ん]/g,\n  [CapturableCharacterType.KUTOUTEN]: /[、。]/g,\n  [CapturableCharacterType.CHOUON]: /[ー]/g,\n  [CapturableCharacterType.KAGIKAKKO]: /[「」]/g,\n  /* eslint-disable-next-line no-irregular-whitespace */\n  [CapturableCharacterType.ZENKAKU_SPACE]: /[　]/g,\n  [CapturableCharacterType.HANKAKU_SPACE]: /[ ]/g,\n  [CapturableCharacterType.ZENKAKU_ALPHABET]: /[Ａ-Ｚａ-ｚ]/g,\n  [CapturableCharacterType.HANKAKU_ALPHABET]: /[A-Za-z]/g,\n  [CapturableCharacterType.ZENKAKU_NUMBER]: /[０-９]/g,\n  [CapturableCharacterType.HANKAKU_NUMBER]: /[0-9]/g,\n  [CapturableCharacterType.ZENKAKU_1BYTE_SYMBOL]: /[！＂”＃＄％＆＇’（）＊＋，－．／：；＜＝＞？＠［￥］＾＿｀“｛｜｝～]/g,\n  [CapturableCharacterType.HANKAKU_1BYTE_SYMBOL]: /[!\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~]/g,\n}\n\nexport type ExtractorInput = {\n  input: string;\n  patterns?: CapturableCharacterPattern | CapturableCharacterPattern[];\n}\nexport function extractor({\n  input,\n  patterns = CapturableCharacterType.HIRAGANA,\n}: ExtractorInput): string {\n  const regExp = patterns instanceof RegExp\n    ? patterns\n    : generateCapturableRegExp(patterns)\n  const filter = input.replace(regExp, '')\n  if (filter.length === 0) {\n    return input\n  }\n  return input.replace(\n    new RegExp('[' + filter + ']', 'g'),\n    '',\n  )\n}\n\nexport function generateCapturableRegExp(\n  patterns: CapturableCharacterPattern | CapturableCharacterPattern[],\n): RegExp {\n  const sources: string[] = []\n  const _patternParser = (pattern: CapturableCharacterPattern) => {\n    if (typeof pattern === 'string') {\n      sources.push('[' + pattern + ']')\n    } else if (pattern instanceof RegExp) {\n      sources.push(pattern.source)\n    } else {\n      sources.push(CapturableCharacterMap[pattern].source)\n    }\n  }\n\n  if (Array.isArray(patterns)) {\n    for (const pattern of patterns) {\n      _patternParser(pattern)\n    }\n  } else {\n    _patternParser(patterns)\n  }\n  return new RegExp(sources.join('|'), 'g')\n}\n","export function isHiraganaCharCode(char: number): boolean {\n  return (char >= 0x3041 && char <= 0x3096)\n      || (char >= 0x309D && char <= 0x309E)\n}\n","export function toKatakanaCharCode(char: number): number {\n  return char + 96\n}\n","/**\n * 全角ひらがなから半角への変換表\n */\nexport const katakanaMap: Record<string, string> = {\n  が: 'ｶﾞ',\n  ぎ: 'ｷﾞ',\n  ぐ: 'ｸﾞ',\n  げ: 'ｹﾞ',\n  ご: 'ｺﾞ',\n  ざ: 'ｻﾞ',\n  じ: 'ｼﾞ',\n  ず: 'ｽﾞ',\n  ぜ: 'ｾﾞ',\n  ぞ: 'ｿﾞ',\n  だ: 'ﾀﾞ',\n  ぢ: 'ﾁﾞ',\n  づ: 'ﾂﾞ',\n  で: 'ﾃﾞ',\n  ど: 'ﾄﾞ',\n  ば: 'ﾊﾞ',\n  び: 'ﾋﾞ',\n  ぶ: 'ﾌﾞ',\n  べ: 'ﾍﾞ',\n  ぼ: 'ﾎﾞ',\n  ぱ: 'ﾊﾟ',\n  ぴ: 'ﾋﾟ',\n  ぷ: 'ﾌﾟ',\n  ぺ: 'ﾍﾟ',\n  ぽ: 'ﾎﾟ',\n  ゔ: 'ｳﾞ',\n  あ: 'ｱ',\n  い: 'ｲ',\n  う: 'ｳ',\n  え: 'ｴ',\n  お: 'ｵ',\n  か: 'ｶ',\n  き: 'ｷ',\n  く: 'ｸ',\n  け: 'ｹ',\n  こ: 'ｺ',\n  さ: 'ｻ',\n  し: 'ｼ',\n  す: 'ｽ',\n  せ: 'ｾ',\n  そ: 'ｿ',\n  た: 'ﾀ',\n  ち: 'ﾁ',\n  つ: 'ﾂ',\n  て: 'ﾃ',\n  と: 'ﾄ',\n  な: 'ﾅ',\n  に: 'ﾆ',\n  ぬ: 'ﾇ',\n  ね: 'ﾈ',\n  の: 'ﾉ',\n  は: 'ﾊ',\n  ひ: 'ﾋ',\n  ふ: 'ﾌ',\n  へ: 'ﾍ',\n  ほ: 'ﾎ',\n  ま: 'ﾏ',\n  み: 'ﾐ',\n  む: 'ﾑ',\n  め: 'ﾒ',\n  も: 'ﾓ',\n  や: 'ﾔ',\n  ゆ: 'ﾕ',\n  よ: 'ﾖ',\n  ら: 'ﾗ',\n  り: 'ﾘ',\n  る: 'ﾙ',\n  れ: 'ﾚ',\n  ろ: 'ﾛ',\n  わ: 'ﾜ',\n  を: 'ｦ',\n  ん: 'ﾝ',\n  ぁ: 'ｧ',\n  ぃ: 'ｨ',\n  ぅ: 'ｩ',\n  ぇ: 'ｪ',\n  ぉ: 'ｫ',\n  っ: 'ｯ',\n  ゃ: 'ｬ',\n  ゅ: 'ｭ',\n  ょ: 'ｮ',\n  '。': '｡',\n  '、': '､',\n  'ー': 'ｰ',\n  '「': '｢',\n  '」': '｣',\n  '・': '･',\n}\n","/**\n * 英字の全角文字を半角文字に変換するためのマップ\n */\nexport const alphabetMap: Record<string, string> = {\n  'Ａ': 'A',\n  'Ｂ': 'B',\n  'Ｃ': 'C',\n  'Ｄ': 'D',\n  'Ｅ': 'E',\n  'Ｆ': 'F',\n  'Ｇ': 'G',\n  'Ｈ': 'H',\n  'Ｉ': 'I',\n  'Ｊ': 'J',\n  'Ｋ': 'K',\n  'Ｌ': 'L',\n  'Ｍ': 'M',\n  'Ｎ': 'N',\n  'Ｏ': 'O',\n  'Ｐ': 'P',\n  'Ｑ': 'Q',\n  'Ｒ': 'R',\n  'Ｓ': 'S',\n  'Ｔ': 'T',\n  'Ｕ': 'U',\n  'Ｖ': 'V',\n  'Ｗ': 'W',\n  'Ｘ': 'X',\n  'Ｙ': 'Y',\n  'Ｚ': 'Z',\n  'ａ': 'a',\n  'ｂ': 'b',\n  'ｃ': 'c',\n  'ｄ': 'd',\n  'ｅ': 'e',\n  'ｆ': 'f',\n  'ｇ': 'g',\n  'ｈ': 'h',\n  'ｉ': 'i',\n  'ｊ': 'j',\n  'ｋ': 'k',\n  'ｌ': 'l',\n  'ｍ': 'm',\n  'ｎ': 'n',\n  'ｏ': 'o',\n  'ｐ': 'p',\n  'ｑ': 'q',\n  'ｒ': 'r',\n  'ｓ': 's',\n  'ｔ': 't',\n  'ｕ': 'u',\n  'ｖ': 'v',\n  'ｗ': 'w',\n  'ｘ': 'x',\n  'ｙ': 'y',\n  'ｚ': 'z',\n}\n","/**\n * 数字の全角文字を半角文字に変換するためのマップ\n */\nexport const numberMap: Record<string, string> = {\n  '０': '0',\n  '１': '1',\n  '２': '2',\n  '３': '3',\n  '４': '4',\n  '５': '5',\n  '６': '6',\n  '７': '7',\n  '８': '8',\n  '９': '9',\n}\n","/**\n * ASCII で英数の前後にある記号のマップ\n */\nexport const symbolMap: Record<string, string> = {\n  '　': ' ',\n  '！': '!',\n  '＂': '\"',\n  '”': '\"',\n  '＃': '#',\n  '＄': '$',\n  '％': '%',\n  '＆': '&',\n  '＇': '\\'',\n  '’': '\\'',\n  '（': '(',\n  '）': ')',\n  '＊': '*',\n  '＋': '+',\n  '，': ',',\n  '－': '-',\n  '．': '.',\n  '／': '/',\n  '：': ':',\n  '；': ';',\n  '＜': '<',\n  '＝': '=',\n  '＞': '>',\n  '？': '?',\n  '＠': '@',\n  '［': '[',\n  '￥': '\\\\',\n  '］': ']',\n  '＾': '^',\n  '＿': '_',\n  '｀': '`',\n  '“': '`',\n  '｛': '{',\n  '｜': '|',\n  '｝': '}',\n  '～': '~',\n}\n","import { isHiraganaCharCode } from './isHiraganaCharCode'\nimport { toKatakanaCharCode } from './toKatakanaCharCode'\nimport { katakanaMap } from '../maps/kana/hiragana2hankakuKatakana'\nimport { alphabetMap } from '../maps/kana/alphabet'\nimport { numberMap } from '../maps/kana/number'\nimport { symbolMap } from '../maps/kana/symbol'\n\nexport enum KanaType {\n  Hiragana,\n  ZenkakuKatakana,\n  HankakuKatakana,\n}\n\nexport function kanaConverter(type: KanaType, strings: string): string {\n  let convertedStrings = ''\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    if (type === KanaType.Hiragana) {\n      convertedStrings += string\n    } else if (type === KanaType.ZenkakuKatakana) {\n      const char = strings.charCodeAt(i)\n      if (isHiraganaCharCode(char)) {\n        convertedStrings += String.fromCharCode(toKatakanaCharCode(char))\n      } else {\n        convertedStrings += string\n      }\n    } else if (type === KanaType.HankakuKatakana) {\n      if (typeof katakanaMap[string] === 'string') {\n        convertedStrings += katakanaMap[string]\n      } else if (typeof alphabetMap[string] === 'string') {\n        convertedStrings += alphabetMap[string]\n      } else if (typeof numberMap[string] === 'string') {\n        convertedStrings += numberMap[string]\n      } else if (typeof symbolMap[string] === 'string') {\n        convertedStrings += symbolMap[string]\n      } else {\n        convertedStrings += string\n      }\n    }\n  }\n  return convertedStrings\n}\n","import { diff } from './utilities/diff'\nimport {\n  CapturableCharacterPattern,\n  CapturableCharacterType,\n  generateCapturableRegExp,\n  extractor,\n} from './utilities/extractor'\nimport { kanaConverter, KanaType } from './utilities/kanaConverter'\nexport { KanaType, CapturableCharacterType }\nexport type { CapturableCharacterPattern }\n\nexport type Options = {\n  observeInterval?: number; // unit: ms\n  debug?: boolean; // logging if true\n  event?: boolean; // logging if true\n  realtime?: boolean | HTMLInputElement;\n  enter?: boolean | HTMLInputElement;\n  clearOnInputEmpty?: boolean;\n  capturablePatterns?: CapturableCharacterPattern | CapturableCharacterPattern[];\n};\n\n// TODO: support other elements (e.g. HTMLDivElement, HTMLSpanElement, HTMLTextAreaElement)\nexport type OutputElement = Output | HTMLInputElement | string;\nexport type Output = {\n  element: HTMLInputElement;\n  type?: KanaType;\n};\nexport enum OutputTiming {\n  REALTIME, // default and priority\n  ENTER,\n}\n// TODO: support textarea (HTMLTextAreaElement)\nexport type InputElement = HTMLInputElement | string;\nexport function setupObserver(\n  input: InputElement,\n  outputs: OutputElement | OutputElement[],\n  options: Options = {\n    observeInterval: 30,\n    debug: false,\n    realtime: true,\n    enter: false,\n    clearOnInputEmpty: false,\n    capturablePatterns: CapturableCharacterType.HIRAGANA,\n  },\n) {\n  // 入力値を受け付けるパターン\n  // TODO: support dynamic patterns\n  const capturablePatterns = generateCapturableRegExp(\n    options.capturablePatterns ?? CapturableCharacterType.HIRAGANA,\n  )\n\n  // 入力元を整える\n  const inputElement = typeof input === 'string'\n    ? document.querySelector<HTMLInputElement>(input)\n    : input\n  if (!inputElement) {\n    throw new Error('input element not found')\n  }\n\n  // 出力のタイミング\n  let outputTiming = OutputTiming.REALTIME\n  const realtimeIsDynamic = options.realtime instanceof HTMLInputElement\n  const enterIsDynamic = options.enter instanceof HTMLInputElement\n  const outputTimingIsStatic = !realtimeIsDynamic && !enterIsDynamic\n  function _checkOutputTiming() {\n    const realtime =\n      options.realtime &&\n      (options.realtime === true ||\n        (options.realtime instanceof HTMLInputElement && options.realtime.checked))\n    const enter =\n      options.enter &&\n      (options.enter === true ||\n        (options.enter instanceof HTMLInputElement && options.enter.checked))\n    outputTiming = realtime || !enter\n      ? OutputTiming.REALTIME // realtime=true, realtime=false & enter=false\n      : OutputTiming.ENTER  // realtime=false & enter=true\n  }\n  if (outputTimingIsStatic) {\n    _checkOutputTiming()\n  }\n  _debug('outputTiming', { outputTiming, outputTimingIsStatic, realtimeIsDynamic, enterIsDynamic })\n\n  // 出力先を整える\n  const activeOutputs: Required<Output>[] = []\n  const _outputParser = (output: OutputElement): void => {\n    if (typeof output === 'string') {\n      const elements = document.querySelectorAll<HTMLInputElement>(output)\n      for (const element of elements) {\n        activeOutputs.push({ element, type: KanaType.Hiragana })\n      }\n    } else if (output instanceof HTMLInputElement) {\n      activeOutputs.push({ element: output, type: KanaType.Hiragana })\n    } else {\n      activeOutputs.push({\n        element: output.element,\n        type: output.type ?? KanaType.Hiragana,\n      })\n    }\n  }\n  if (Array.isArray(outputs)) {\n    for (const output of outputs) {\n      _outputParser(output)\n    }\n  } else {\n    _outputParser(outputs)\n  }\n\n  // 状態管理\n  let observing: boolean = false\n  let defaultString: string = ''\n  let currentString: string = ''\n\n  let inputValue: string = ''\n  const outputValues: string[] = new Array(activeOutputs.length).fill('')\n  /**\n   * 初期化\n   * @returns void\n   */\n  function _reset() {\n    _debug('reset')\n    defaultString = ''\n    currentString = ''\n\n    inputValue = ''\n    for (let i = 0; i < activeOutputs.length; i++) {\n      outputValues[i] = ''\n    }\n  }\n  /**\n   * 初期入力値を保存する\n   * @returns void\n   */\n  function _setup() {\n    defaultString = inputElement!.value\n    activeOutputs.forEach(({ element }, index) => {\n      outputValues[index] = element.value\n    })\n    _debug('setup', inputElement!.value, { defaultString, activeOutputs })\n  }\n\n  let timer: ReturnType<typeof setInterval> | undefined\n  /**\n   * 監視を開始する\n   * @returns void\n   */\n  function _start() {\n    _debug('start', { timer })\n    if (timer) {\n      return\n    }\n    timer = setInterval(() => {\n      _observe()\n    }, options.observeInterval ?? 30)\n  }\n  /**\n   * 監視を終了する\n   * @returns void\n   */\n  function _end() {\n    _debug('end', { timer })\n    if (timer) {\n      clearInterval(timer)\n      timer = undefined\n    }\n  }\n\n  /**\n   * 入力を監視する\n   * @return void\n   */\n  function _observe() {\n    const inputString = inputElement!.value\n    _debug('observe', { observing, inputString, defaultString, currentString, outputValues })\n\n    // 空文字の場合は何もしない\n    if (inputString === '') {\n      return\n    }\n\n    // すでに入力されている文字を取り除く\n    const diffResult = diff(defaultString, inputString)\n\n    // 同じだったら何もしない\n    if (currentString === diffResult.diff) {\n      return\n    }\n    currentString = diffResult.diff\n\n    // セットする\n    _set(currentString)\n  }\n\n  /**\n   * セットする\n   * @param string string\n   * @returns void\n   */\n  function _set(string: string) {\n    _debug('set', { defaultString, string, inputValue, outputValues })\n    const extracted = extractor({\n      input: string,\n      patterns: capturablePatterns,\n    })\n    if (extracted.length === string.length) {\n      inputValue = extracted\n    }\n\n    activeOutputs.forEach(({ element, type }, index) => {\n      const converted = kanaConverter(type, inputValue)\n      _debug('converted', { type, string, inputValue, after: converted, before: outputValues[index], bufferKana: element.dataset['bufferKana'], bufferOther: element.dataset['bufferOther'] })\n      if (outputTiming === OutputTiming.REALTIME) {\n        element.value = outputValues[index] + converted\n      } else if (outputTiming === OutputTiming.ENTER) {\n        _setBuffer(element, converted)\n      }\n    })\n  }\n\n  /**\n   * 文字を抽出してセットする\n   * @param candidate string\n   * @returns void\n   */\n  function _extractAndSet(candidate: string) {\n    const extracted = extractor({\n      input: candidate,\n      patterns: capturablePatterns,\n    })\n    if (candidate && candidate === extracted) {\n      _setup()\n      _set(extracted)\n    }\n  }\n\n  /**\n   * 文字を反映せずに一時保存する\n   *\n   * @param element HTMLInputElement\n   * @param string  string\n   * @returns void\n   */\n  function _setBuffer(element: HTMLInputElement, string: string) {\n    _debug('set buffer', { observing, element, string })\n    if (observing) {\n      element.dataset['bufferKana'] = string\n    } else {\n      element.dataset['bufferOther'] = (element.dataset['bufferOther'] ?? '') + string\n    }\n  }\n  /**\n   * バッファをクリアする\n   * @param element HTMLInputElement\n   * @returns void\n   */\n  function _clearBuffer(element: HTMLInputElement) {\n    _debug('clear buffer')\n    element.dataset['bufferOther'] = ''\n    element.dataset['bufferKana'] = ''\n  }\n  // 予約\n  // /**\n  //  * 全てのバッファをクリアする\n  //  * @returns void\n  //  */\n  // function _clearBufferAll() {\n  //   activeOutputs.forEach(({ element }) => {\n  //     _clearBuffer(element)\n  //   })\n  // }\n  /**\n   * 反映する\n   * @returns void\n   */\n  function _reflectBufferAll(clear: boolean = false) {\n    activeOutputs.forEach(({ element }) => {\n      if (clear) {\n        element.value = ''\n        _clearBuffer(element)\n        return\n      }\n      const buffer = (element.dataset['bufferOther'] ?? '') + (element.dataset['bufferKana'] ?? '')\n      if (buffer) {\n        element.value += buffer\n        _clearBuffer(element)\n      }\n    })\n  }\n\n  /**\n   * デバッグログ\n   * @param message\n   * @param args\n   * @return void\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _debug(message: string, ...args: any[]) {\n    if (!options.debug) {\n      return\n    }\n    if (args.length === 0) {\n      console.log('%c[debug]', 'background-color: #ff6d13; color: #fffafa;', { message })\n      return\n    }\n    console.log('%c[debug]', 'background-color: #ff6d13; color: #fffafa;', { message }, ...args)\n  }\n\n  /**\n   * イベントログ\n   * @param message\n   * @param args\n   * @return void\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _event(message: string, ...args: any[]) {\n    if (!options.event) {\n      return\n    }\n    if (args.length === 0) {\n      console.info('%c[event]', 'background-color: #fffafa; color: #303030;', { message })\n      return\n    }\n    console.info('%c[event]', 'background-color: #fffafa; color: #303030;', { message }, ...args)\n  }\n\n  /**\n   * Event listeners\n   */\n  inputElement.addEventListener('focus', (e: FocusEvent) => {\n    _event('focus', { e })\n    _setup()\n  })\n  inputElement.addEventListener('blur', (e: FocusEvent) => {\n    _event('blur', { e })\n    _end()\n  })\n  inputElement.addEventListener('compositionstart', (e: CompositionEvent) => {\n    _event('compositionstart', { e })\n    _setup()\n    _start()\n    observing = true\n  })\n  inputElement.addEventListener('compositionend', (e: CompositionEvent) => {\n    _event('compositionend', { e, inputValue })\n    _end()\n    _reset()\n    observing = false\n\n    // windows での全角スペース対策\n    if (['　', ' '].includes(e.data)) {\n      _debug('spaces', '\"' + e.data + '\"')\n      _extractAndSet(e.data)\n    }\n  })\n  inputElement.addEventListener('beforeinput', (e: InputEvent) => {\n    _event('beforeinput', { observing, e })\n    if (!observing && !e.isComposing && e.data) {\n      _extractAndSet(e.data)\n    }\n  })\n  inputElement.addEventListener('input', (e: Event) => { // 本当は InputEvent がくるが TS の定義が Event\n    _event('input', { observing, e })\n  })\n  inputElement.addEventListener('keydown', (e: KeyboardEvent) => {\n    _event('keydown', { observing, e })\n  })\n  inputElement.addEventListener('keyup', (e: KeyboardEvent) => {\n    _event('keyup', { observing, e }, e.code)\n    if (e.code === 'Enter') {\n      let clear = false\n      if (options.clearOnInputEmpty && inputElement.value === '') {\n        clear = true\n        _reset()\n        _set('')\n      }\n      if (outputTiming === OutputTiming.ENTER) {\n        _reflectBufferAll(clear)\n      }\n    }\n    if (e.code === 'Backspace') {\n      // FIXME: REALTIME -> 日本語入力中にバックスペースで全て消すと1文字目が残る\n      // FIXME: ENTER -> 日本語入力中にバックスペースで全て消し、Enterで確定もしくは半角入力後エンターすると1文字目が残る\n      _debug('backspace', { outputTiming }, inputElement.value)\n    }\n  })\n\n  if (options.realtime instanceof HTMLInputElement) {\n    options.realtime.addEventListener('change', () => {\n      _debug('realtime change')\n      _checkOutputTiming()\n      _reflectBufferAll()\n    })\n  }\n  if (options.enter instanceof HTMLInputElement) {\n    options.enter.addEventListener('change', () => {\n      _debug('enter change')\n      _checkOutputTiming()\n    })\n  }\n}\n"],"names":["diff","beforeString","afterString","beforeCharacters","afterCharacters","length","sameCharacters","diffCharacters","gap","i","beforeCharacter","j","afterCharacter","CapturableCharacterType","CapturableCharacterType2","CapturableCharacterMap","extractor","input","patterns","regExp","generateCapturableRegExp","filter","sources","_patternParser","pattern","isHiraganaCharCode","char","toKatakanaCharCode","katakanaMap","alphabetMap","numberMap","symbolMap","KanaType","KanaType2","kanaConverter","type","strings","convertedStrings","string","OutputTiming","OutputTiming2","setupObserver","outputs","options","capturablePatterns","inputElement","outputTiming","realtimeIsDynamic","enterIsDynamic","outputTimingIsStatic","_checkOutputTiming","realtime","enter","_debug","activeOutputs","_outputParser","output","elements","element","observing","defaultString","currentString","inputValue","outputValues","_reset","_setup","index","timer","_start","_observe","_end","inputString","diffResult","_set","extracted","converted","_setBuffer","_extractAndSet","candidate","_clearBuffer","_reflectBufferAll","clear","buffer","message","args","_event","e"],"mappings":"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"}